#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–ª—è —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è URL –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∑–∞–ø–∏—Å—è—Ö –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö.
–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç —à–∏—Ñ—Ä—É–µ—Ç URL –≤ —Ç–∞–±–ª–∏—Ü–µ scans, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.
"""

import sqlite3
import os
import sys
from utils.logger import setup_logger
from utils.encryption import get_encryption
from utils.database import get_db_connection

logger = setup_logger('migrate_url_encryption', filename='migrate_url_encryption.log')

def is_already_encrypted(data: str) -> bool:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã –ª–∏ –¥–∞–Ω–Ω—ã–µ.
    
    Args:
        data: –î–∞–Ω–Ω—ã–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        bool: True, –µ—Å–ª–∏ –¥–∞–Ω–Ω—ã–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã
    """
    if not data:
        return False
    
    try:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ utils.encryption
        encryption = get_encryption()
        return encryption.is_encrypted(data)
    except Exception:
        return False

def migrate_url_encryption() -> bool:
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç URL –≤ —Ç–∞–±–ª–∏—Ü–µ scans, —à–∏—Ñ—Ä—É—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.
    
    Returns:
        bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        logger.info("Starting URL encryption migration...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã scans
        cursor.execute('SELECT id, url FROM scans')
        rows = cursor.fetchall()
        
        if not rows:
            logger.info("No scans found in database")
            return True
        
        logger.info(f"Found {len(rows)} scans to process")
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        encryption = get_encryption()
        
        migration_count = 0
        error_count = 0
        
        for row in rows:
            scan_id, url = row
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å URL
                if not is_already_encrypted(url):
                    encrypted_url = encryption.encrypt_url(url)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    cursor.execute(
                        'UPDATE scans SET url = ? WHERE id = ?',
                        (encrypted_url, scan_id)
                    )
                    migration_count += 1
                    logger.debug(f"Encrypted URL for scan {scan_id}")
                else:
                    logger.debug(f"URL for scan {scan_id} is already encrypted")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                if migration_count % 10 == 0:
                    logger.info(f"Migrated {migration_count} records...")
                
            except Exception as e:
                logger.error(f"Error migrating scan {scan_id}: {e}", exc_info=True)
                error_count += 1
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()
        
        logger.info(f"URL encryption migration completed:")
        logger.info(f"  - Total records processed: {len(rows)}")
        logger.info(f"  - Records migrated: {migration_count}")
        logger.info(f"  - Errors: {error_count}")
        
        return error_count == 0
        
    except Exception as e:
        logger.error(f"Error in URL encryption migration: {e}", exc_info=True)
        return False

def migrate_vulnerabilities_url_encryption() -> bool:
    """
    –ú–∏–≥—Ä–∏—Ä—É–µ—Ç URL –≤ —Ç–∞–±–ª–∏—Ü–µ vulnerabilities, —à–∏—Ñ—Ä—É—è —Ç–µ, –∫–æ—Ç–æ—Ä—ã–µ –µ—â–µ –Ω–µ –∑–∞—à–∏—Ñ—Ä–æ–≤–∞–Ω—ã.
    
    Returns:
        bool: True –µ—Å–ª–∏ –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–æ—à–ª–∞ —É—Å–ø–µ—à–Ω–æ
    """
    try:
        logger.info("Starting vulnerabilities URL encryption migration...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö
        conn = get_db_connection()
        cursor = conn.cursor()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã vulnerabilities
        cursor.execute('SELECT id, url FROM vulnerabilities')
        rows = cursor.fetchall()
        
        if not rows:
            logger.info("No vulnerabilities found in database")
            return True
        
        logger.info(f"Found {len(rows)} vulnerabilities to process")
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏—è
        encryption = get_encryption()
        
        migration_count = 0
        error_count = 0
        
        for row in rows:
            vuln_id, url = row
            
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —à–∏—Ñ—Ä–æ–≤–∞—Ç—å URL
                if not is_already_encrypted(url):
                    encrypted_url = encryption.encrypt_url(url)
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    cursor.execute(
                        'UPDATE vulnerabilities SET url = ? WHERE id = ?',
                        (encrypted_url, vuln_id)
                    )
                    migration_count += 1
                    logger.debug(f"Encrypted URL for vulnerability {vuln_id}")
                else:
                    logger.debug(f"URL for vulnerability {vuln_id} is already encrypted")
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø–∏—Å–µ–π
                if migration_count % 10 == 0:
                    logger.info(f"Migrated {migration_count} vulnerability records...")
                
            except Exception as e:
                logger.error(f"Error migrating vulnerability {vuln_id}: {e}", exc_info=True)
                error_count += 1
                continue
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
        conn.commit()
        conn.close()
        
        logger.info(f"Vulnerabilities URL encryption migration completed:")
        logger.info(f"  - Total records processed: {len(rows)}")
        logger.info(f"  - Records migrated: {migration_count}")
        logger.info(f"  - Errors: {error_count}")
        
        return error_count == 0
        
    except Exception as e:
        logger.error(f"Error in vulnerabilities URL encryption migration: {e}", exc_info=True)
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏"""
    try:
        print("üîê URL Encryption Migration Tool")
        print("=" * 50)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        if not os.path.exists('scanner.db'):
            print("‚ùå Database file 'scanner.db' not found!")
            return False
        
        print("üìä Starting URL encryption migration...")
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º URL –≤ —Ç–∞–±–ª–∏—Ü–µ scans
        scans_success = migrate_url_encryption()
        if not scans_success:
            print("‚ùå Failed to migrate scans URLs")
            return False
        
        # –ú–∏–≥—Ä–∏—Ä—É–µ–º URL –≤ —Ç–∞–±–ª–∏—Ü–µ vulnerabilities
        vulns_success = migrate_vulnerabilities_url_encryption()
        if not vulns_success:
            print("‚ùå Failed to migrate vulnerabilities URLs")
            return False
        
        print("‚úÖ URL encryption migration completed successfully!")
        print("üîí All URLs are now encrypted in the database.")
        print("üë§ Authorized users will see decrypted URLs in the interface.")
        print("üîê Unauthorized users will see encrypted URLs.")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Migration failed: {e}")
        logger.error(f"Migration failed: {e}", exc_info=True)
        return False

if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1) 