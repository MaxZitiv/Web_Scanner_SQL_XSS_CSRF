import logging
import os
import smtplib
from email.mime.multipart import MIMEMultipart
from email.mime.text import MIMEText
from logging.handlers import RotatingFileHandler

from dotenv import load_dotenv

# –£—Ä–æ–≤–Ω–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVELS = {
    'DEBUG': logging.DEBUG,
    'INFO': logging.INFO,
    'WARNING': logging.WARNING,
    'ERROR': logging.ERROR,
    'CRITICAL': logging.CRITICAL
}

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
env_path = os.path.join(os.path.dirname(os.path.dirname(__file__)), '.env')
load_dotenv(dotenv_path=env_path)

def get_log_dir():
    """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø—É—Ç—å –∫ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ª–æ–≥–æ–≤"""
    log_dir = os.path.join(os.path.dirname(os.path.dirname(__file__)), 'logs')
    if not os.path.exists(log_dir):
        os.makedirs(log_dir)
    return log_dir

def set_log_level(logger_name: str, level: str):
    """–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞"""
    target_logger = logging.getLogger(logger_name)
    target_logger.setLevel(LOG_LEVELS.get(level.upper(), logging.INFO))


# SMTP –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
SMTP_SERVER = os.getenv("SMTP_SERVER", "smtp.gmail.com")
SMTP_PORT = int(os.getenv("SMTP_PORT", 587))
SMTP_USERNAME = os.getenv("SMTP_USERNAME")
SMTP_PASSWORD = os.getenv("SMTP_PASSWORD")
ADMIN_EMAIL = os.getenv("ADMIN_EMAIL")
FROM_EMAIL = SMTP_USERNAME

# –í–∞–ª–∏–¥–∞—Ü–∏—è email
if not all([SMTP_USERNAME, SMTP_PASSWORD, ADMIN_EMAIL]):
    # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º logging –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ —Å–ª—É—á–∞–µ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ª–æ–≥–≥–µ—Ä–∞
    import logging
    logging.warning("SMTP_USERNAME, SMTP_PASSWORD –∏–ª–∏ ADMIN_EMAIL –Ω–µ –∑–∞–¥–∞–Ω—ã –≤ .env. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ email –Ω–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤–º–µ—Å—Ç–æ –≥–ª–æ–±–∞–ª—å–Ω—ã—Ö
    _smtp_username = SMTP_USERNAME or "default@example.com"
    _smtp_password = SMTP_PASSWORD or "default_password"
    _admin_email = ADMIN_EMAIL or "admin@example.com"
    _from_email = FROM_EMAIL or _smtp_username
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    globals().update({
        "SMTP_USERNAME": _smtp_username,
        "SMTP_PASSWORD": _smtp_password,
        "ADMIN_EMAIL": _admin_email,
        "FROM_EMAIL": _from_email
    })

# üìÅ –ü–∞–ø–∫–∞ –ª–æ–≥–æ–≤
LOG_DIR = "logs"
os.makedirs(LOG_DIR, exist_ok=True)

# üìå –û–±—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Ñ–æ—Ä–º–∞—Ç–∞
LOG_FORMAT = "%(asctime)s | %(levelname)s | %(name)s | %(message)s"
DATE_FORMAT = "%Y-%m-%d %H:%M:%S"

# üîÑ –§—É–Ω–∫—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –ø–æ —É—Ä–æ–≤–Ω—é
def get_file_handler(level_name: str, log_file: str):
    handler = RotatingFileHandler(
        filename=os.path.join(LOG_DIR, log_file),
        maxBytes=2 * 1024 * 1024,  # 2 MB
        backupCount=5,
        encoding="utf-8"
    )
    handler.setLevel(getattr(logging, level_name))
    handler.setFormatter(logging.Formatter(LOG_FORMAT, datefmt=DATE_FORMAT))
    return handler

# üß† –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
def notify_admin(level: str, message: str):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É —á–µ—Ä–µ–∑ SMTP.
    """
    subject = f"[WebScanner] {level.upper()} Notification"
    body = f"Level: {level.upper()}\n\nMessage:\n{message}"

    msg = MIMEMultipart()
    msg['From'] = str(FROM_EMAIL)
    msg['To'] = str(ADMIN_EMAIL)
    msg['Subject'] = subject
    msg.attach(MIMEText(body, 'plain'))

    try:
        with smtplib.SMTP(SMTP_SERVER, SMTP_PORT) as server:
            server.starttls()
            server.login(str(SMTP_USERNAME), str(SMTP_PASSWORD))
            server.send_message(msg)
        print(f"Admin notified via email: {ADMIN_EMAIL}")
    except Exception as e:
        print(f"Failed to send admin notification: {e}")

# üß© –ö–∞—Å—Ç–æ–º–Ω—ã–π —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ª–æ–≥–æ–≤ –ø–æ —É—Ä–æ–≤–Ω—é
class LevelFilter(logging.Filter):
    def __init__(self, level: int):
        super().__init__()
        self.level = level

    def filter(self, record: logging.LogRecord) -> bool:
        return record.levelno == self.level

# üß± –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger("WebScanner")
logger.setLevel(logging.DEBUG)  # –õ–æ–≤–∏–º –≤—Å—ë ‚Äî —Ñ–∏–ª—å—Ç—Ä—É–µ–º –≤ —Ö–µ–Ω–¥–ª–µ—Ä–∞—Ö

# üì¶ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –ø–æ —É—Ä–æ–≤–Ω—è–º
info_handler = get_file_handler("INFO", "info.log")
info_handler.addFilter(LevelFilter(logging.INFO))

warning_handler = get_file_handler("WARNING", "warning.log")
warning_handler.addFilter(LevelFilter(logging.WARNING))

error_handler = get_file_handler("ERROR", "error.log")
error_handler.addFilter(LevelFilter(logging.ERROR))

# üñ•Ô∏è –ö–æ–Ω—Å–æ–ª—å–Ω—ã–π —Ö–µ–Ω–¥–ª–µ—Ä (—Ç–æ–ª—å–∫–æ INFO –∏ –≤—ã—à–µ, –Ω–æ –Ω–µ DEBUG)
console_handler = logging.StreamHandler()
console_handler.setLevel(logging.INFO)
console_handler.setFormatter(logging.Formatter(LOG_FORMAT, datefmt=DATE_FORMAT))

# ‚ûï –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
logger.addHandler(info_handler)
logger.addHandler(warning_handler)
logger.addHandler(error_handler)
logger.addHandler(console_handler)

# üì£ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ–º
def log_and_notify(level: str, message: str) -> None:
    level = level.lower()
    log_func = getattr(logger, level, logger.info)  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é INFO

    log_func(message)

    if level in ("warning", "error", "critical"):
        try:
            notify_admin(level.upper(), message)
        except Exception as e:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º–æ–π –≤—ã–∑–æ–≤ logger.error –≤–º–µ—Å—Ç–æ log_and_notify –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ä–µ–∫—É—Ä—Å–∏–∏
            logger.error(f"Failed to notify admin: {e}")
