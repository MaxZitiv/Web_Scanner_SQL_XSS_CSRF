"""
–ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏ –¥–ª—è —Å–∫–∞–Ω–µ—Ä–∞ –≤–µ–±-—É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
"""
import os
import sys
import argparse
import asyncio
from typing import List, Dict, Any, Optional
import getpass

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ sys.path
sys.path.insert(0, os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

from models.user_model import UserModel
from controllers.auth_controller import AuthController
from controllers.scan_controller import ScanController
from utils.logger import logger


class CLIMode:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ —Ä–µ–∂–∏–º–µ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏"""

    def __init__(self):
        self.user_model = UserModel()
        self.auth_controller = AuthController(self.user_model)
        self.scan_controller = None
        self.current_user_id = None
        self.current_username = None

    def login(self, username: str, password: str) -> bool:
        """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        try:
            success, message = self.auth_controller.login(username, password)
            if success:
                self.current_user_id = self.user_model.get_user_id()
                self.current_username = self.user_model.get_username()
                print(f"‚úÖ –£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥. –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {self.current_username}!")
                logger.info(f"User {username} logged in successfully via CLI")
                return True
            else:
                print(f"‚ùå –û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞: {message}")
                logger.warning(f"Failed login attempt for {username}: {message}")
                return False
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ö–æ–¥–µ: {e}"
            print(f"‚ùå {error_msg}")
            logger.error(error_msg)
            return False

    def interactive_login(self) -> bool:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –≤—Ö–æ–¥ —Å –∑–∞–ø—Ä–æ—Å–æ–º —É—á–µ—Ç–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö"""
        print("=== –í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É ===")
        username = input("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email: ")
        password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")
        return self.login(username, password)

    def _log_message(self, message: str) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ª–æ–≥–∞ –¥–ª—è CLI —Ä–µ–∂–∏–º–∞"""
        print(message)
        
    def _update_progress(self, progress: int, current_url: str = "", total_urls: int = 0, found_vulns: int = 0) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ –¥–ª—è CLI —Ä–µ–∂–∏–º–∞
        
        Args:
            progress: –ü—Ä–æ—Ü–µ–Ω—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è (0-100)
            current_url: –¢–µ–∫—É—â–∏–π –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º—ã–π URL
            total_urls: –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            found_vulns: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        """
        progress_bar_length = 40
        filled_length = int(progress_bar_length * progress / 100)
        bar = "‚ñà" * filled_length + "-" * (progress_bar_length - filled_length)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_str = f"\r–ü—Ä–æ–≥—Ä–µ—Å—Å: |{bar}| {progress}%"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω–∞
        if current_url:
            # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–ª–∏–Ω—É URL –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
            display_url = current_url[:60] + "..." if len(current_url) > 60 else current_url
            progress_str += f"\n–¢–µ–∫—É—â–∏–π URL: {display_url}"
        
        if total_urls > 0:
            progress_str += f"\n–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ URL: {int(total_urls * progress / 100)}/{total_urls}"
        
        if found_vulns > 0:
            progress_str += f"\n–ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {found_vulns}"
        
        # –û—á–∏—â–∞–µ–º –ø—Ä–µ–¥—ã–¥—É—â–∏–µ —Å—Ç—Ä–æ–∫–∏ –∏ –≤—ã–≤–æ–¥–∏–º –Ω–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print("\033[K", end="")  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
        if current_url:
            print("\033[K", end="")  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å URL
        if total_urls > 0:
            print("\033[K", end="")  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º URL
        if found_vulns > 0:
            print("\033[K", end="")  # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫—É —Å —É—è–∑–≤–∏–º–æ—Å—Ç—è–º–∏
            
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –≤ –Ω–∞—á–∞–ª–æ –∏ –≤—ã–≤–æ–¥–∏–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        print("\033[3F", end="")  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ 3 —Å—Ç—Ä–æ–∫–∏ –≤–≤–µ—Ä—Ö
        print(progress_str, flush=True)
        
    def _process_results(self, results: Dict[str, Any], scan_type: str = "standard") -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è CLI —Ä–µ–∂–∏–º–∞"""
        if "error" in results:
            print(f"\n‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {results['error']}")
            return
            
        url = results.get("url", "–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        vulnerabilities = results.get("vulnerabilities", {})
        
        print(f"\nüìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è {url}:")
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –ø–æ –∫–∞–∂–¥–æ–º—É —Ç–∏–ø—É —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
        for vuln_type, vuln_list in vulnerabilities.items():
            if vuln_type == "sql":
                if vuln_list:
                    print(f"   - SQL –∏–Ω—ä–µ–∫—Ü–∏–∏: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(vuln_list)}")
                    for vuln in vuln_list[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                        print(f"     ‚Ä¢ {vuln.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
                else:
                    print("   - SQL –∏–Ω—ä–µ–∫—Ü–∏–∏: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                    
            elif vuln_type == "xss":
                if vuln_list:
                    print(f"   - XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(vuln_list)}")
                    for vuln in vuln_list[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                        print(f"     ‚Ä¢ {vuln.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
                else:
                    print("   - XSS —É—è–∑–≤–∏–º–æ—Å—Ç–∏: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
                    
            elif vuln_type == "csrf":
                if vuln_list:
                    print(f"   - CSRF —É—è–∑–≤–∏–º–æ—Å—Ç–∏: –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {len(vuln_list)}")
                    for vuln in vuln_list[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3
                        print(f"     ‚Ä¢ {vuln.get('description', '–ë–µ–∑ –æ–ø–∏—Å–∞–Ω–∏—è')}")
                else:
                    print("   - CSRF —É—è–∑–≤–∏–º–æ—Å—Ç–∏: –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω—ã")
        
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        total_urls = results.get("total_urls_scanned", 0)
        total_forms = results.get("total_forms_scanned", 0)
        scan_duration = results.get("scan_duration", 0)
        
        print("\nüìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
        print(f"   - –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ URL: {total_urls}")
        print(f"   - –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ —Ñ–æ—Ä–º: {total_forms}")
        print(f"   - –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {scan_duration:.2f} —Å–µ–∫")
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        try:
            from utils.database import Database
            db = Database()
            
            # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ —Å–ø–∏—Å–∫–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            vulns_list: List[Dict[str, Any]] = []
            for vuln_type, vuln_items in vulnerabilities.items():
                if vuln_items:
                    for vuln in vuln_items:
                        vulns_list.append({
                            "type": vuln_type,
                            "url": vuln.get("url", url),
                            "details": vuln.get("description", "")
                        })
            
            # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            if self.current_user_id is not None:
                success = db.save_scan_async(
                    self.current_user_id,
                    url,
                    vulns_list,
                    scan_type,
                    scan_duration
                )
                
                if success:
                    print("\nüíæ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        except Exception as e:
            print(f"\n‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ: –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö: {e}")

    async def scan_url(self, url: str, scan_type: str = "standard", max_depth: int = 3, max_concurrent: int = 5, timeout: int = 30) -> bool:
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ URL —Å –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
        
        Args:
            url: URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_type: –¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (standard, deep, quick)
            max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
            timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        """
        if not self.current_user_id:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
            return False

        try:
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            self.scan_controller = ScanController(url, [scan_type], self.current_user_id, max_depth=max_depth, max_concurrent=max_concurrent, timeout=timeout)
            print(f"üîç –ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {url}")
            print(f"   –¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scan_type}")
            print(f"   –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞: {max_depth}")
            print(f"   –ú–∞–∫—Å. –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {max_concurrent}")
            print(f"   –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞: {timeout} —Å–µ–∫")

            # –†–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            print("‚è≥ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ...")

            # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            # –°–æ–∑–¥–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫
            scan_metrics: Dict[str, Any] = {
                "current_url": "",
                "total_urls": 0,
                "found_vulns": 0
            }
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏
            def update_progress_with_metrics(progress: float) -> None:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º float –≤ int –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
                progress_int = int(progress)
                
                self._update_progress(
                    progress_int, 
                    scan_metrics["current_url"],
                    scan_metrics["total_urls"],
                    scan_metrics["found_vulns"]
                )
            
            # –°–æ–∑–¥–∞–µ–º –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ª–æ–≥–æ–≤ —Å –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ–º –º–µ—Ç—Ä–∏–∫
            def log_with_metrics(message: str) -> None:
                # –í—ã–≤–æ–¥–∏–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                self._log_message(message)
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–æ–±—â–µ–Ω–∏–π
                if "–ù–∞–π–¥–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å:" in message:
                    scan_metrics["found_vulns"] += 1
                elif "–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ" in message and "URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è" in message:
                    # –ò–∑–≤–ª–µ–∫–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ URL
                    try:
                        import re
                        match = re.search(r'–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ (\d+) URL', message)
                        if match:
                            scan_metrics["total_urls"] = int(match.group(1))
                    except:
                        pass
            
            # –°–æ–∑–¥–∞–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—É—é –æ–±–µ—Ä—Ç–∫—É –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–≤—É—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –∏–∑ progress.emit
            def progress_wrapper(progress: float, current_url: str = "") -> None:
                # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏
                if current_url:
                    scan_metrics["current_url"] = current_url
                
                # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—à –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
                update_progress_with_metrics(progress)
            
            await self.scan_controller.start_scan(
                url, 
                [scan_type], 
                max_depth=max_depth, 
                max_concurrent=max_concurrent, 
                timeout=timeout, 
                on_log=log_with_metrics, 
                on_progress=progress_wrapper,
                on_result=lambda results: self._process_results(results, scan_type)
            )

            # –û—á–∏—â–∞–µ–º —Å—Ç—Ä–æ–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            print("\033[4B", end="")  # –ü–µ—Ä–µ–º–µ—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ 4 —Å—Ç—Ä–æ–∫–∏ –≤–Ω–∏–∑
            print("\033[K", end="")  # –û—á–∏—â–∞–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É
            print("\033[K", end="")  # –û—á–∏—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
            print("\033[K", end="")  # –û—á–∏—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
            print("\033[K", end="")  # –û—á–∏—â–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É
            print("\033[4F", end="")  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫—É—Ä—Å–æ—Ä –Ω–∞ 4 —Å—Ç—Ä–æ–∫–∏ –≤–≤–µ—Ä—Ö
            
            print("\n‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")

            return True
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {e}"
            print(f"‚ùå {error_msg}")
            logger.error(error_msg)
            return False

    def list_scans(self) -> List[Dict[str, Any]]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if not self.current_user_id:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
            return []

        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            # –î–ª—è –ø—Ä–∏–º–µ—Ä–∞ –ø—Ä–æ—Å—Ç–æ –≤–µ—Ä–Ω–µ–º –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫
            print("üìã –°–ø–∏—Å–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π:")
            print("   (–ø–æ–∫–∞ –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π)")
            return []
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}"
            print(f"‚ùå {error_msg}")
            logger.error(error_msg)
            return []

    def show_scan_results(self, scan_id: int) -> bool:
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ ID"""
        if not self.current_user_id:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
            return False

        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            print(f"üìÑ –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{scan_id}:")
            print("   (—Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã)")
            return True
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}"
            print(f"‚ùå {error_msg}")
            logger.error(error_msg)
            return False

    def export_results(self, scan_id: int, format: str, filename: str) -> bool:
        """–≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if not self.current_user_id:
            print("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
            return False

        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω–∞—è –ª–æ–≥–∏–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
            print(f"üíæ –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è #{scan_id} –≤ {format} —Ñ–æ—Ä–º–∞—Ç...")
            print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –≤ —Ñ–∞–π–ª: {filename}")
            return True
        except Exception as e:
            error_msg = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤: {e}"
            print(f"‚ùå {error_msg}")
            logger.error(error_msg)
            return False

    def interactive_mode(self) -> None:
        """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã"""
        if not self.current_user_id:
            if not self.interactive_login():
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É. –í—ã—Ö–æ–¥.")
                return

        print(f"\nüöÄ –ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {self.current_username}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
        print("  scan <url> [type] [depth] [concurrent] [timeout] - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL")
        print("    type: —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1=quick, 2=standard, 3=deep), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2")
        print("    depth: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1-10), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3")
        print("    concurrent: –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (1-20), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5")
        print("    timeout: —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5-300), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30")
        print("  list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
        print("  results <id> - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        print("  export <id> <format> <filename> - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
        print("  help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
        print("  exit - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")

        while True:
            try:
                command = input(f"\n[{self.current_username}]> ").strip()
                if not command:
                    continue

                parts = command.split()
                cmd = parts[0].lower()

                if cmd == "exit":
                    print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                    break
                elif cmd == "help":
                    print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:")
                    print("  scan <url> [type] [depth] [concurrent] [timeout] - –ó–∞–ø—É—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ URL")
                    print("    type: —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1=quick, 2=standard, 3=deep), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 2")
                    print("    depth: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1-10), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 3")
                    print("    concurrent: –º–∞–∫—Å. –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (1-20), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 5")
                    print("    timeout: —Ç–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (5-300), –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 30")
                    print("  list - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")
                    print("  results <id> - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                    print("  export <id> <format> <filename> - –≠–∫—Å–ø–æ—Ä—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")
                    print("  help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É")
                    print("  exit - –í—ã–π—Ç–∏ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã")
                elif cmd == "scan" and len(parts) >= 2:
                    url = parts[1]
                    scan_type = parts[2] if len(parts) > 2 else "standard"
                    max_depth = int(parts[3]) if len(parts) > 3 else 3
                    max_concurrent = int(parts[4]) if len(parts) > 4 else 5
                    timeout = int(parts[5]) if len(parts) > 5 else 30
                    
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    if scan_type.isdigit():
                        scan_type_map = {
                            "1": "quick",
                            "2": "standard",
                            "3": "deep"
                        }
                        scan_type = scan_type_map.get(scan_type, "standard")
                    
                    asyncio.run(self.scan_url(url, scan_type, max_depth, max_concurrent, timeout))
                elif cmd == "list":
                    self.list_scans()
                elif cmd == "results" and len(parts) >= 2:
                    try:
                        scan_id = int(parts[1])
                        self.show_scan_results(scan_id)
                    except ValueError:
                        print("‚ùå ID —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                elif cmd == "export" and len(parts) >= 4:
                    try:
                        scan_id = int(parts[1])
                        format_type = parts[2]
                        filename = parts[3]
                        self.export_results(scan_id, format_type, filename)
                    except ValueError:
                        print("‚ùå ID —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
                else:
                    print("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã. –í–≤–µ–¥–∏—Ç–µ 'help' –¥–ª—è —Å–ø—Ä–∞–≤–∫–∏.")
            except KeyboardInterrupt:
                print("üëã –î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            except Exception as e:
                error_msg = f"–û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã: {e}"
                print(f"‚ùå {error_msg}")
                logger.error(error_msg)


def run_cli_mode(url: Optional[str] = None, username: Optional[str] = None, 
                  scan_type: str = "2", max_depth: int = 3, max_concurrent: int = 5, timeout: int = 30) -> int:
    """–ó–∞–ø—É—Å–∫ CLI —Ä–µ–∂–∏–º–∞
    
    Args:
        url: URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        scan_type: –¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1=quick, 2=standard, 3=deep)
        max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        timeout: –¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
    """
    
    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —á–∏—Å–ª–æ–≤–æ–π —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ —Å—Ç—Ä–æ–∫–æ–≤—ã–π
    scan_type_map = {
        "1": "quick",
        "2": "standard",
        "3": "deep"
    }
    scan_type = scan_type_map.get(scan_type, "standard")
    print("üîß Web Scanner CLI —Ä–µ–∂–∏–º")
    print("=" * 40)

    cli = CLIMode()

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω URL, –Ω–æ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏—Ö
    if url and not username:
        print("–î–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")
        if not cli.interactive_login():
            return 1

    # –ï—Å–ª–∏ –ø–µ—Ä–µ–¥–∞–Ω—ã –∏ URL, –∏ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    if url and username:
        password = getpass.getpass("–ü–∞—Ä–æ–ª—å: ")
        if not cli.login(username, password):
            return 1
        asyncio.run(cli.scan_url(url, scan_type, max_depth, max_concurrent, timeout))
        return 0

    # –ò–Ω–∞—á–µ –∑–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
    cli.interactive_mode()
    return 0


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Web Scanner CLI")
    parser.add_argument("--url", help="URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--username", help="–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –≤—Ö–æ–¥–∞")
    parser.add_argument("--type", choices=["1", "2", "3"], default="2", 
                       help="–¢–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (1=quick, 2=standard, 3=deep)")
    parser.add_argument("--depth", type=int, default=3, 
                       help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    parser.add_argument("--concurrent", type=int, default=5, 
                       help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    parser.add_argument("--timeout", type=int, default=30, 
                       help="–¢–∞–π–º–∞—É—Ç –∑–∞–ø—Ä–æ—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö")

    args = parser.parse_args()
    exit_code = run_cli_mode(args.url, args.username, args.type, args.depth, args.concurrent, args.timeout)
    sys.exit(exit_code)
