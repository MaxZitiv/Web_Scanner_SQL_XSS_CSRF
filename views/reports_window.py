"""
–û–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤
views/reports_window.py
"""

from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                            QLabel, QTableWidget, QTableWidgetItem, QPushButton, 
                            QComboBox, QMessageBox, QDateEdit)
from PyQt5.QtCore import Qt, QDate
from PyQt5.QtGui import QFont
from typing import Dict, List, Optional
from utils.database import db
from utils.logger import logger
from utils.export_utils import ExportUtils

class ReportsWindow(QMainWindow):
    """–û–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ —ç–∫—Å–ø–æ—Ä—Ç–∞ –æ—Ç—á–µ—Ç–æ–≤"""

    def __init__(self, user_id: int, parent: Optional[QWidget] = None):
        super().__init__(parent)
        self.user_id = user_id
        self.setWindowTitle("üìã –û—Ç—á–µ—Ç—ã")
        self.setGeometry(100, 100, 1200, 800)

        self.setup_ui()
        self.load_reports()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        main_layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üìã –û—Ç—á–µ—Ç—ã –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        main_layout.addWidget(title_label)

        # –ü–∞–Ω–µ–ª—å —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters_layout = QHBoxLayout()

        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –Ω–∞—á–∞–ª–∞
        start_date_label = QLabel("–ù–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞:")
        filters_layout.addWidget(start_date_label)

        self.start_date = QDateEdit()
        self.start_date.setCalendarPopup(True)
        self.start_date.setDate(QDate.currentDate().addMonths(-1))
        filters_layout.addWidget(self.start_date)

        # –§–∏–ª—å—Ç—Ä –ø–æ –¥–∞—Ç–µ –æ–∫–æ–Ω—á–∞–Ω–∏—è
        end_date_label = QLabel("–ö–æ–Ω–µ—á–Ω–∞—è –¥–∞—Ç–∞:")
        filters_layout.addWidget(end_date_label)

        self.end_date = QDateEdit()
        self.end_date.setCalendarPopup(True)
        self.end_date.setDate(QDate.currentDate())
        filters_layout.addWidget(self.end_date)

        # –ö–Ω–æ–ø–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
        apply_filter_btn = QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
        apply_filter_btn.clicked.connect(self.apply_filter)
        filters_layout.addWidget(apply_filter_btn)

        # –ö–Ω–æ–ø–∫–∞ —Å–±—Ä–æ—Å–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        reset_filter_btn = QPushButton("–°–±—Ä–æ—Å–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä")
        reset_filter_btn.clicked.connect(self.reset_filter)
        filters_layout.addWidget(reset_filter_btn)

        filters_layout.addStretch()

        # –ö–Ω–æ–ø–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_btn = QPushButton("–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
        export_btn.clicked.connect(self.export_report)
        filters_layout.addWidget(export_btn)

        main_layout.addLayout(filters_layout)

        # –¢–∞–±–ª–∏—Ü–∞ –æ—Ç—á–µ—Ç–æ–≤
        self.reports_table = QTableWidget()
        self.reports_table.setColumnCount(7)
        self.reports_table.setHorizontalHeaderLabels([
            "ID —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "URL", "–î–∞—Ç–∞", "–¢–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–∏", 
            "–ü–∞—Ä–∞–º–µ—Ç—Ä", "–°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å", "–ü–æ–¥—Ä–æ–±–Ω–æ—Å—Ç–∏"
        ])
        self.reports_table.setSelectionBehavior(QTableWidget.SelectRows)  # type: ignore
        main_layout.addWidget(self.reports_table)

        # –ü–∞–Ω–µ–ª—å —ç–∫—Å–ø–æ—Ä—Ç–∞
        export_layout = QHBoxLayout()

        export_format_label = QLabel("–§–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞:")
        export_layout.addWidget(export_format_label)

        self.export_format = QComboBox()
        self.export_format.addItems(["HTML", "PDF", "JSON", "CSV"])
        export_layout.addWidget(self.export_format)

        export_layout.addStretch()

        main_layout.addLayout(export_layout)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.close_window)
        main_layout.addWidget(close_btn)

        central_widget.setLayout(main_layout)
        
    def close_window(self) -> None:
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –æ–∫–Ω–∞"""
        self.close()

    def load_reports(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ—Ç—á–µ—Ç–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            conn = db.get_db_connection()
            cursor = conn.cursor()

            start_date_str = self.start_date.date().toString("yyyy-MM-dd")
            end_date_str = self.end_date.date().toString("yyyy-MM-dd")

            cursor.execute("""
                SELECT scan_id, url, timestamp, vulnerability_type, 
                       parameter, severity, details
                FROM scan_results 
                WHERE user_id = ? AND DATE(timestamp) BETWEEN ? AND ?
                ORDER BY timestamp DESC
                LIMIT 500
            """, (self.user_id, start_date_str, end_date_str))

            rows = cursor.fetchall()
            conn.close()

            self.reports_table.setRowCount(len(rows))

            for i, row in enumerate(rows):
                scan_id = str(row[0])
                url = row[1] if row[1] else "N/A"
                timestamp = row[2] if row[2] else "N/A"
                vuln_type = row[3] if row[3] else "N/A"
                parameter = row[4] if row[4] else "N/A"
                severity = row[5] if row[5] else "N/A"
                details = row[6] if row[6] else "N/A"

                self.reports_table.setItem(i, 0, QTableWidgetItem(scan_id))
                self.reports_table.setItem(i, 1, QTableWidgetItem(url))
                self.reports_table.setItem(i, 2, QTableWidgetItem(timestamp))
                self.reports_table.setItem(i, 3, QTableWidgetItem(vuln_type))
                self.reports_table.setItem(i, 4, QTableWidgetItem(parameter))
                self.reports_table.setItem(i, 5, QTableWidgetItem(severity))
                self.reports_table.setItem(i, 6, QTableWidgetItem(details))

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            self.reports_table.resizeColumnsToContents()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç—á–µ—Ç–æ–≤: {e}")

    def apply_filter(self):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ –æ—Ç—á–µ—Ç–∞–º"""
        try:
            self.load_reports()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

    def reset_filter(self):
        """–°–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–∞"""
        try:
            self.start_date.setDate(QDate.currentDate().addMonths(-1))
            self.end_date.setDate(QDate.currentDate())
            self.load_reports()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")

    def export_report(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ä–º–∞—Ç —ç–∫—Å–ø–æ—Ä—Ç–∞
            format_name = self.export_format.currentText()
            file_extension = format_name.lower()

            # –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞
            reports_data: List[Dict[str, str]] = []

            for row in range(self.reports_table.rowCount()):
                # –ë–µ–∑–æ–ø–∞—Å–Ω–æ –ø–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –∏–∑ —è—á–µ–µ–∫
                def get_item_text(col: int) -> str:
                    item = self.reports_table.item(row, col)
                    return item.text() if item else "N/A"
                
                report_data = {
                    'scan_id': get_item_text(0),
                    'url': get_item_text(1),
                    'timestamp': get_item_text(2),
                    'vulnerability_type': get_item_text(3),
                    'parameter': get_item_text(4),
                    'severity': get_item_text(5),
                    'details': get_item_text(6)
                }
                reports_data.append(report_data)

            if not reports_data:
                QMessageBox.warning(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
                return

            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
            success = ExportUtils.export_data(
                self, 
                reports_data, 
                format_name, 
                file_extension, 
                self.user_id
            )

            if success:
                QMessageBox.information(
                    self, 
                    "–£—Å–ø–µ—Ö", 
                    f"–û—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω –≤ —Ñ–æ—Ä–º–∞—Ç–µ {format_name}"
                )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞: {e}")
            QMessageBox.critical(
                self, 
                "–û—à–∏–±–∫–∞", 
                f"–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç: {str(e)}"
            )

