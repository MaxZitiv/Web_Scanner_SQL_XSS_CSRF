from PyQt5.QtWidgets import (
    QWidget, QVBoxLayout, QHBoxLayout, QLabel, QGroupBox,
    QLineEdit, QCheckBox, QSpinBox, QPushButton, QTreeWidget,
    QTextEdit, QComboBox,
    QSplitter, QTableWidget, 
    QHeaderView, QScrollArea, QMessageBox, QProgressBar)
from PyQt5.QtCore import Qt
from controllers.scan_controller import ScanController
from utils.logger import logger
from utils.error_handler import error_handler
from utils.performance import get_local_timestamp
from qasync import asyncSlot
from views.tabs.scan_tab_optimized import ScanTabStatsMixin

class ScanTabWidget(ScanTabStatsMixin, QWidget):
    def __init__(self, user_id, parent=None):
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–≥–æ –∫–ª–∞—Å—Å–∞ QWidget
        QWidget.__init__(self, parent)

        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–∏–∫—Å–∏–Ω–∞
        ScanTabStatsMixin.__init__(self, parent)

        self.user_id = user_id
        self.scan_controller = ScanController(user_id)
        self._scan_start_time = None
        self._total_urls = 0
        self._completed_urls = 0
        self._total_progress = 0
        self._active_workers = 0
        self._worker_progress = {}
        self._is_paused = False
        self._log_entries = []
        self._filtered_log_entries = []
        self._current_filter = "–í—Å–µ"
        self._search_text = ""
        self._stats = {
            'urls_found': 0,
            'urls_scanned': 0,
            'forms_found': 0,
            'forms_scanned': 0,
            'vulnerabilities': 0,
            'requests_sent': 0,
            'errors': 0,
        }
        try:
            self.init_components()
            self.init_stats_manager()
            self.setup_ui()
        except Exception as e:
            logger.error(f"Failed to initialize ScanTabWidget: {e}")
            raise

    def init_components(self):
        try:
            # –ë–∞–∑–æ–≤—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            self.url_input = QLineEdit()
            self.scan_button = QPushButton("–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            self.results_table = QTableWidget()

            # –ß–µ–∫–±–æ–∫—Å—ã –¥–ª—è —Ç–∏–ø–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            self.sql_checkbox = QCheckBox("SQL Injection")
            self.xss_checkbox = QCheckBox("XSS")
            self.csrf_checkbox = QCheckBox("CSRF")

            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            self.depth_spinbox = QSpinBox()
            self.concurrent_spinbox = QSpinBox()
            self.timeout_spinbox = QSpinBox()

            # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.pause_button = QPushButton("‚è∏Ô∏è –ü–∞—É–∑–∞")
            self.stop_button = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")

            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
            self.scan_status = QLabel()
            # –£–¥–∞–ª–µ–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä –ø–æ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –ª–æ–≥–∞
            self.site_tree = QTreeWidget()
            self.detailed_log = QTextEdit()
            self.log_filter = QComboBox()
            self.log_search = QLineEdit()
            self.clear_search_button = QPushButton("üóëÔ∏è")

            # –ö–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            self.stats_labels = {}

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
            required_components = [
                'url_input', 'scan_button', 'results_table',
                'sql_checkbox', 'xss_checkbox', 'csrf_checkbox',
                'depth_spinbox', 'concurrent_spinbox', 'timeout_spinbox',
                'pause_button', 'stop_button',
                'scan_status',
                'site_tree', 'detailed_log',
                'log_filter', 'log_search', 'clear_search_button',
                'stats_labels'
            ]

            for component in required_components:
                if not hasattr(self, component):
                    raise ValueError(f"Component '{component}' not found in ScanTabWidget")

        except Exception as e:
            logger.error(f"Failed to initialize scan tab components: {e}")
            raise

    @asyncSlot()
    async def on_scan_button_clicked(self):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            await self.scan_website_sync()
        except Exception as e:
            logger.error(f"Error creating task: {e}")
            error_handler.handle_error(e)

    def on_scan_button_clicked_wrapper(self):
        """–û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –∫–Ω–æ–ø–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        # –ü—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –º–µ—Ç–æ–¥, —Ç–∞–∫ –∫–∞–∫ @asyncSlot —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –µ–≥–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ
        _ = self.on_scan_button_clicked()  # –ò—Å–ø–æ–ª—å–∑—É–µ–º _ –¥–ª—è —è–≤–Ω–æ–≥–æ –∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –≤–∫–ª–∞–¥–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã
            if not hasattr(self, 'url_input') or self.url_input is None:
                raise ValueError("url_input not initialized")
            if not hasattr(self, 'scan_button') or self.scan_button is None:
                raise ValueError("scan_button not initialized")
            if not hasattr(self, 'results_table') or self.results_table is None:
                raise ValueError("results_table not initialized")

            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å –ø—Ä–æ–∫—Ä—É—Ç–∫–æ–π
            scroll = QScrollArea()
            scroll.setWidgetResizable(True)

            # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –≤—Å–µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
            content_widget = QWidget()
            content_widget.setMinimumWidth(700)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º layout –¥–ª—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞
            layout = QVBoxLayout(content_widget)

            # 1) –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤–≤–æ–¥–∞ URL
            url_group = QGroupBox("URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            url_layout = QVBoxLayout()
            self.url_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ URL (–Ω–∞–ø—Ä–∏–º–µ—Ä: https://example.com)")
            url_layout.addWidget(self.url_input)
            url_group.setLayout(url_layout)
            layout.addWidget(url_group)

            # 2) –ì—Ä—É–ø–ø–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            vuln_group = QGroupBox("–¢–∏–ø—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            vuln_layout = QHBoxLayout()
            self.sql_checkbox = QCheckBox("SQL Injection")
            self.xss_checkbox = QCheckBox("XSS")
            self.csrf_checkbox = QCheckBox("CSRF")
            for cb in (self.sql_checkbox, self.xss_checkbox, self.csrf_checkbox):
                vuln_layout.addWidget(cb)
            vuln_group.setLayout(vuln_layout)
            layout.addWidget(vuln_group)

            # 3) –ì—Ä—É–ø–ø–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            perf_group = QGroupBox("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
            perf_layout = QVBoxLayout()

            # –ì–ª—É–±–∏–Ω–∞ –æ–±—Ö–æ–¥–∞
            depth_layout = QHBoxLayout()
            depth_layout.addWidget(QLabel("–ì–ª—É–±–∏–Ω–∞ –æ–±—Ö–æ–¥–∞:"))
            self.depth_spinbox = QSpinBox()
            self.depth_spinbox.setRange(0, 10)
            self.depth_spinbox.setValue(3)
            depth_layout.addWidget(self.depth_spinbox)
            depth_layout.addStretch()
            perf_layout.addLayout(depth_layout)

            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            concurrent_layout = QHBoxLayout()
            concurrent_layout.addWidget(QLabel("–ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:"))
            self.concurrent_spinbox = QSpinBox()
            self.concurrent_spinbox.setRange(1, 20)
            self.concurrent_spinbox.setValue(5)
            concurrent_layout.addWidget(self.concurrent_spinbox)
            concurrent_layout.addStretch()
            perf_layout.addLayout(concurrent_layout)

            # –¢–∞–π–º–∞—É—Ç
            timeout_layout = QHBoxLayout()
            timeout_layout.addWidget(QLabel("–¢–∞–π–º–∞—É—Ç (—Å–µ–∫):"))
            self.timeout_spinbox = QSpinBox()
            self.timeout_spinbox.setRange(5, 60)
            self.timeout_spinbox.setValue(30)
            timeout_layout.addWidget(self.timeout_spinbox)
            timeout_layout.addStretch()
            perf_layout.addLayout(timeout_layout)

            perf_group.setLayout(perf_layout)
            layout.addWidget(perf_group)

            # 4) –ì—Ä—É–ø–ø–∞ –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            control_group = QGroupBox("–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")
            control_layout = QHBoxLayout()

            self.scan_button = QPushButton("–ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            self.scan_button.clicked.connect(self.on_scan_button_clicked_wrapper)
            self.pause_button = QPushButton("‚è∏Ô∏è –ü–∞—É–∑–∞")
            self.pause_button.clicked.connect(self.pause_scan)
            self.pause_button.setEnabled(False)
            self.stop_button = QPushButton("–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.stop_button.clicked.connect(self.stop_scan)
            self.stop_button.setEnabled(False)

            control_layout.addWidget(self.scan_button)
            control_layout.addWidget(self.pause_button)
            control_layout.addWidget(self.stop_button)
            control_group.setLayout(control_layout)
            layout.addWidget(control_group)

            # 5) –ì—Ä—É–ø–ø–∞ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (—Å –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–æ–º)
            status_group = QGroupBox("–°—Ç–∞—Ç—É—Å")
            status_layout = QVBoxLayout()

            self.scan_status = QLabel("–ì–æ—Ç–æ–≤ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é")
            self.scan_status.setAlignment(Qt.AlignmentFlag.AlignCenter)
            status_layout.addWidget(self.scan_status)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            self.scan_progress = QProgressBar()
            self.scan_progress.setRange(0, 100)
            self.scan_progress.setValue(0)
            self.scan_progress.setTextVisible(True)
            self.scan_progress.setFormat("%p%")
            status_layout.addWidget(self.scan_progress)

            status_group.setLayout(status_layout)
            layout.addWidget(status_group)

            # 6) –ì—Ä—É–ø–ø–∞ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            log_group = QGroupBox("üîç –î–µ—Ç–∞–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
            log_splitter = QSplitter(Qt.Orientation.Horizontal)

            # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å: –î—Ä–µ–≤–æ–≤–∏–¥–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ
            left_panel = QWidget()
            left_layout = QVBoxLayout(left_panel)

            tree_header = QLabel("üåê –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Å–∞–π—Ç–∞")
            left_layout.addWidget(tree_header)

            self.site_tree = QTreeWidget()
            self.site_tree.setHeaderLabels(["–†–µ—Å—É—Ä—Å", "–¢–∏–ø", "–°—Ç–∞—Ç—É—Å"])
            left_layout.addWidget(self.site_tree)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            stats_group = QGroupBox("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            stats_layout = QVBoxLayout(stats_group)

            self.stats_labels = {}
            stats_items = [
                ("urls_found", "–ù–∞–π–¥–µ–Ω–æ URL:", "0"),
                ("urls_scanned", "–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ URL:", "0"),
                ("forms_found", "–ù–∞–π–¥–µ–Ω–æ —Ñ–æ—Ä–º:", "0"),
                ("forms_scanned", "–ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Ñ–æ—Ä–º:", "0"),
                ("vulnerabilities", "–£—è–∑–≤–∏–º–æ—Å—Ç–µ–π:", "0"),
                ("requests_sent", "–ó–∞–ø—Ä–æ—Å–æ–≤ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", "0"),
                ("errors", "–û—à–∏–±–æ–∫:", "0"),
                ("scan_time", "–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", "00:00:00")
            ]

            for key, label_text, default_value in stats_items:
                label_layout = QHBoxLayout()
                label = QLabel(label_text)
                value = QLabel(default_value)
                label_layout.addWidget(label)
                label_layout.addWidget(value)
                label_layout.addStretch()
                stats_layout.addLayout(label_layout)
                self.stats_labels[key] = value

            left_layout.addWidget(stats_group)

            # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å: –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥
            right_panel = QWidget()
            right_layout = QVBoxLayout(right_panel)

            log_header = QLabel("üìÑ –î–µ—Ç–∞–ª—å–Ω—ã–π –ª–æ–≥")
            right_layout.addWidget(log_header)

            # –§–∏–ª—å—Ç—Ä—ã –ª–æ–≥–∞
            filter_layout = QHBoxLayout()
            filter_layout.addWidget(QLabel("–§–∏–ª—å—Ç—Ä:"))
            self.log_filter = QComboBox()
            self.log_filter.addItems(["–í—Å–µ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–£—Å–ø–µ—Ö", "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–û—à–∏–±–∫–∞"])
            self.log_filter.currentTextChanged.connect(self.filter_log)
            filter_layout.addWidget(self.log_filter)

            filter_layout.addWidget(QLabel("–ü–æ–∏—Å–∫:"))
            self.log_search = QLineEdit()
            self.log_search.setPlaceholderText("–ü–æ–∏—Å–∫ –≤ –ª–æ–≥–µ...")
            self.log_search.textChanged.connect(self.search_log)
            filter_layout.addWidget(self.log_search)

            self.clear_search_button = QPushButton("üóëÔ∏è")
            self.clear_search_button.clicked.connect(self.clear_search)
            filter_layout.addWidget(self.clear_search_button)

            right_layout.addLayout(filter_layout)

            # –ü–æ–ª–µ –¥–µ—Ç–∞–ª—å–Ω–æ–≥–æ –ª–æ–≥–∞
            self.detailed_log = QTextEdit()
            self.detailed_log.setReadOnly(True)
            right_layout.addWidget(self.detailed_log)

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞–Ω–µ–ª–∏ –≤ —Å–ø–ª–∏—Ç—Ç–µ—Ä
            log_splitter.addWidget(left_panel)
            log_splitter.addWidget(right_panel)
            log_splitter.setSizes([300, 500])  # –ù–∞—á–∞–ª—å–Ω—ã–µ —Ä–∞–∑–º–µ—Ä—ã –ø–∞–Ω–µ–ª–µ–π

            log_layout = QVBoxLayout(log_group)
            log_layout.addWidget(log_splitter)

            layout.addWidget(log_group)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤–∏–¥–∂–µ—Ç —Å –∫–æ–Ω—Ç–µ–Ω—Ç–æ–º –≤ –æ–±–ª–∞—Å—Ç—å –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            scroll.setWidget(content_widget)

            # –°–æ–∑–¥–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π layout –¥–ª—è –≤–∫–ª–∞–¥–∫–∏
            main_layout = QVBoxLayout(self)
            main_layout.addWidget(scroll)

            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.init_results_table()

            logger.debug("Scan tab UI setup completed successfully")

        except Exception as e:
            logger.error(f"Error setting up scan tab UI: {e}")
            raise

    def init_results_table(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ç–∞–±–ª–∏—Ü–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞
            if not hasattr(self, 'results_table') or self.results_table is None:
                raise ValueError("results_table not initialized")

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
            self.results_table.setColumnCount(5)
            self.results_table.setHorizontalHeaderLabels(["URL", "–¢–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–∏", "–ü–∞—Ä–∞–º–µ—Ç—Ä", "–°—Ç–∞—Ç—É—Å", "–î–µ–π—Å—Ç–≤–∏—è"])

            header = self.results_table.horizontalHeader()
            if header is not None:
                header.setSectionResizeMode(QHeaderView.ResizeMode.ResizeToContents)
                header.setSectionResizeMode(0, QHeaderView.ResizeMode.Stretch)

            self.results_table.setEditTriggers(QTableWidget.EditTrigger.NoEditTriggers)
            self.results_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
            self.results_table.setAlternatingRowColors(True)
            self.results_table.setSortingEnabled(True)

            # –°–∫—Ä—ã–≤–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            self.results_table.hide()

        except Exception as e:
            logger.error(f"Error initializing results table: {e}")
            raise

    def filter_log(self, filter_text):
        """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∑–∞–ø–∏—Å–µ–π –ª–æ–≥–∞ –ø–æ —Ç–∏–ø—É"""
        try:
            self._current_filter = filter_text
            self.update_log_display()
        except Exception as e:
            logger.error(f"Error filtering log: {e}")

    def search_log(self, search_text):
        """–ü–æ–∏—Å–∫ –≤ –ª–æ–≥–µ –ø–æ —Ç–µ–∫—Å—Ç—É"""
        try:
            self._search_text = search_text.lower()
            self.update_log_display()
        except Exception as e:
            logger.error(f"Error searching in log: {e}")

    def clear_search(self):
        """–û—á–∏—Å—Ç–∫–∞ –ø–æ–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Å–±—Ä–æ—Å —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
        try:
            self.log_search.clear()
            self._search_text = ""
            self.log_filter.setCurrentIndex(0)  # "–í—Å–µ"
            self._current_filter = "–í—Å–µ"
            self.update_log_display()
        except Exception as e:
            logger.error(f"Error clearing search: {e}")

    def update_log_display(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ª–æ–≥–∞ —Å —É—á–µ—Ç–æ–º —Ñ–∏–ª—å—Ç—Ä–æ–≤ –∏ –ø–æ–∏—Å–∫–∞"""
        try:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            self._filtered_log_entries = []
            for entry in self._log_entries:
                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É
                if self._current_filter != "–í—Å–µ" and entry.get('type', '') != self._current_filter:
                    continue

                # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–µ–∫—Å—Ç—É –ø–æ–∏—Å–∫–∞
                if self._search_text and self._search_text not in entry.get('message', '').lower():
                    continue

                self._filtered_log_entries.append(entry)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.detailed_log.clear()
            for entry in self._filtered_log_entries:
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∑–∞–ø–∏—Å—å
                timestamp = entry.get('timestamp', '')
                message_type = entry.get('type', '')
                message = entry.get('message', '')

                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                color = "black"
                if message_type == "–û—à–∏–±–∫–∞":
                    color = "red"
                elif message_type == "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ":
                    color = "orange"
                elif message_type == "–£—Å–ø–µ—Ö":
                    color = "green"
                elif message_type == "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è":
                    color = "blue"

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω—É—é –∑–∞–ø–∏—Å—å
                formatted_entry = f'<span style="color:{color}">[{timestamp}] {message_type}: {message}</span>'
                self.detailed_log.append(formatted_entry)

        except Exception as e:
            logger.error(f"Error updating log display: {e}")

    def add_log_entry(self, message, message_type="–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –≤—Ä–µ–º–µ–Ω–Ω—É—é –º–µ—Ç–∫—É
            timestamp = get_local_timestamp()

            # –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å
            entry = {
                'timestamp': timestamp,
                'type': message_type,
                'message': message
            }

            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –æ–±—â–∏–π —Å–ø–∏—Å–æ–∫
            self._log_entries.append(entry)

            # –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            self.update_log_display()

        except Exception as e:
            logger.error(f"Error adding log entry: {e}")

    def pause_scan(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–∞/–≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self._is_paused = not self._is_paused
            if self._is_paused:
                self.pause_button.setText("‚ñ∂Ô∏è –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
                self.scan_status.setText("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                self.add_log_entry("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            else:
                self.pause_button.setText("‚è∏Ô∏è –ü–∞—É–∑–∞")
                self.scan_status.setText("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è")
                self.add_log_entry("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
        except Exception as e:
            logger.error(f"Error pausing/resuming scan: {e}")

    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
            self._is_paused = False
            self._scan_start_time = None
            self._total_urls = 0
            self._completed_urls = 0
            self._total_progress = 0
            self._active_workers = 0
            self._worker_progress = {}

            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.scan_button.setEnabled(True)
            self.pause_button.setEnabled(False)
            self.pause_button.setText("‚è∏Ô∏è –ü–∞—É–∑–∞")
            self.stop_button.setEnabled(False)
            self.scan_status.setText("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
            self.add_log_entry("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.reset_stats()

        except Exception as e:
            logger.error(f"Error stopping scan: {e}")

    def update_scan_status(self, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.scan_status.setText(status)
        except Exception as e:
            logger.error(f"Error updating scan status: {e}")

    def update_scan_progress(self, progress):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
            if hasattr(self, 'scan_progress'):
                self.scan_progress.setValue(int(progress))
        except Exception as e:
            logger.error(f"Error updating scan progress: {e}")

    def update_stats(self, key, value):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if key in self._stats:
                self._stats[key] = value
                if key in self.stats_labels:
                    self.stats_labels[key].setText(str(value))
        except Exception as e:
            logger.error(f"Error updating stats: {e}")

    def reset_stats(self):
        """–°–±—Ä–æ—Å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            for key in self._stats:
                self._stats[key] = 0
                if key in self.stats_labels:
                    self.stats_labels[key].setText("0")

            # –û—Å–æ–±—ã–π —Å–ª—É—á–∞–π –¥–ª—è –≤—Ä–µ–º–µ–Ω–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if 'scan_time' in self.stats_labels:
                self.stats_labels['scan_time'].setText("00:00:00")
        except Exception as e:
            logger.error(f"Error resetting stats: {e}")

    async def scan_website_sync(self):
        """–°–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –ø–æ–ª—è –≤–≤–æ–¥–∞
            url = self.url_input.text().strip()
            if not url:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            vuln_types = []
            if self.sql_checkbox.isChecked():
                vuln_types.append("sql")
            if self.xss_checkbox.isChecked():
                vuln_types.append("xss")
            if self.csrf_checkbox.isChecked():
                vuln_types.append("csrf")

            if not vuln_types:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return

            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            depth = self.depth_spinbox.value()
            concurrent = self.concurrent_spinbox.value()
            timeout = self.timeout_spinbox.value()

            # –û–±–Ω–æ–≤–ª—è–µ–º UI
            self.scan_button.setEnabled(False)
            self.pause_button.setEnabled(True)
            self.stop_button.setEnabled(True)
            self.pause_button.setText("‚è∏Ô∏è –ü–∞—É–∑–∞")
            self.scan_status.setText("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—é...")
            self.add_log_entry(f"–ù–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {url}", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            self.add_log_entry(f"–¢–∏–ø—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {', '.join(vuln_types)}", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")
            self.add_log_entry(f"–ì–ª—É–±–∏–Ω–∞ –æ–±—Ö–æ–¥–∞: {depth}, –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: {concurrent}, –¢–∞–π–º–∞—É—Ç: {timeout}—Å", "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.reset_stats()

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            self._scan_start_time = get_local_timestamp()
            await self.scan_controller.start_scan(
                url=url,
                scan_types=vuln_types,
                max_depth=depth,
                max_concurrent=concurrent,
                timeout=timeout,
                on_progress=self.update_scan_progress,
                on_log=self.add_log_entry,
                on_vulnerability=self.update_stats
            )

            # –û–±–Ω–æ–≤–ª—è–µ–º UI –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            self.scan_button.setEnabled(True)
            self.pause_button.setEnabled(False)
            self.stop_button.setEnabled(False)
            self.scan_status.setText("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")
            self.add_log_entry("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ", "–£—Å–ø–µ—Ö")

        except Exception as e:
            logger.error(f"Error during website scan: {e}")
            self.scan_status.setText("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏")
            self.add_log_entry(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏: {str(e)}", "–û—à–∏–±–∫–∞")
            self.scan_button.setEnabled(True)
            self.pause_button.setEnabled(False)
            self.stop_button.setEnabled(False)
