from PyQt5.QtWidgets import QWidget, QPushButton, QLineEdit, QVBoxLayout, QLabel, QMessageBox, QHBoxLayout
from controllers.auth_controller import AuthController
from utils.logger import logger, log_and_notify
import os
import sqlite3
from PyQt5.QtCore import pyqtSignal
from typing import Optional, Any


class LoginWindow(QWidget):
    login_successful = pyqtSignal(int, str)

    def __init__(self, user_model, parent: Optional[Any] = None):
        super().__init__(parent)
        self.user_model = user_model
        self.controller = AuthController(self.user_model)
        self.parent_window = parent
        self.init_ui()
        self.load_styles()
        logger.info("LoginWindow initialized.")

    def load_styles(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∏–ª–µ–π –∏–∑ —Ñ–∞–π–ª–∞ styles.qss"""
        try:
            style_path = 'styles.qss'
            if os.path.exists(style_path):
                with open(style_path, 'r', encoding='utf-8') as f:
                    self.setStyleSheet(f.read())
                logger.info("–°—Ç–∏–ª–∏ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –¥–ª—è –æ–∫–Ω–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏")
            else:
                logger.warning(f"–§–∞–π–ª —Å—Ç–∏–ª–µ–π styles.qss –Ω–µ –Ω–∞–π–¥–µ–Ω: {style_path}")
        except (ValueError, sqlite3.Error, KeyError, AttributeError, OSError) as e:
            log_and_notify('error', f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∏–ª–µ–π: {e}")

    def init_ui(self):
        self.setWindowTitle("–í—Ö–æ–¥ –≤ —Å–∏—Å—Ç–µ–º—É")

        # –ü–æ–ª—è
        self.username_label = QLabel("–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ Email")
        self.username_input = QLineEdit()
        self.username_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–ª–∏ email")

        self.password_label = QLabel("–ü–∞—Ä–æ–ª—å")
        self.password_input = QLineEdit()
        self.password_input.setEchoMode(QLineEdit.Password)
        self.password_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å")

        # –ö–Ω–æ–ø–∫–∞ –ø–æ–∫–∞–∑–∞/—Å–∫—Ä—ã—Ç–∏—è –ø–∞—Ä–æ–ª—è
        self.show_password_button = QPushButton("üëÅ")
        self.show_password_button.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å/—Å–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å")
        self.show_password_button.setMaximumWidth(40)
        self.show_password_button.clicked.connect(self.toggle_password_visibility)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –ø–∞—Ä–æ–ª—è –∏ –∫–Ω–æ–ø–∫–∏
        password_container = QHBoxLayout()
        password_container.addWidget(self.password_input)
        password_container.addWidget(self.show_password_button)

        self.login_button = QPushButton("–í–æ–π—Ç–∏")
        self.login_button.clicked.connect(self.login)

        self.register_button = QPushButton("–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è")
        self.register_button.clicked.connect(self.register)

        # –í–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–º–ø–æ–Ω–æ–≤—â–∏–∫
        layout = QVBoxLayout()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç—Å—Ç—É–ø—ã –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–Ω–µ—à–Ω–µ–≥–æ –≤–∏–¥–∞
        layout.setContentsMargins(20, 20, 20, 20)
        layout.setSpacing(15)

        layout.addWidget(self.username_label)
        layout.addWidget(self.username_input)
        layout.addWidget(self.password_label)
        layout.addLayout(password_container)
        layout.addWidget(self.login_button)
        layout.addWidget(self.register_button)

        self.setLayout(layout)
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —Å–ª–∏—à–∫–æ–º –º–∞–ª–µ–Ω—å–∫–æ–≥–æ –æ–∫–Ω–∞
        self.setMinimumSize(300, 200)
        
        # –í—ã—á–∏—Å–ª—è–µ–º –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ
        self.adjustSize()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ Enter –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
        self.username_input.returnPressed.connect(self.login)
        self.password_input.returnPressed.connect(self.login)

        logger.debug("Login UI components created.")

    def set_loading_state(self, loading: bool):
        """Set loading state for UI elements."""
        self.login_button.setEnabled(not loading)
        self.register_button.setEnabled(not loading)
        self.username_input.setEnabled(not loading)
        self.password_input.setEnabled(not loading)
        self.show_password_button.setEnabled(not loading)
        if loading:
            self.login_button.setText("–í—Ö–æ–¥...")
        else:
            self.login_button.setText("–í–æ–π—Ç–∏")

    def login(self):
        username = self.username_input.text()
        password = self.password_input.text()

        if not username or not password:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–∞—Ä–æ–ª—å")
            return

        try:
            success, message = self.controller.login(username, password)
            if success:
                logger.info(f"User {username} logged in successfully.")
                user_id = self.user_model.get_user_id()
                username = self.user_model.get_username()
                if self.parent_window and user_id is not None:
                    self.parent_window.go_to_dashboard(user_id, username)
                else:
                    log_and_notify('error', "Parent window or user_id is not set")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.")
            else:
                logger.warning(f"Failed login attempt for {username}: {message}")
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞ –≤—Ö–æ–¥–∞", message)
        except Exception as e:
            log_and_notify('error', f"An error occurred during login: {e}")
            QMessageBox.critical(self, "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞.")

    def register(self):
        try:
            if self.parent_window:
                self.parent_window.go_to_registration()
            else:
                log_and_notify('error', "Parent window is not set")
                QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å.")
        except (ValueError, KeyError, AttributeError, ImportError, sqlite3.Error, OSError) as e:
            log_and_notify('error', f"Error opening registration window: {e}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    def keyPressEvent(self, a0):
        # –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ Enter, —Ç–∞–∫ –∫–∞–∫ –æ–Ω —É–∂–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç—Å—è
        # —á–µ—Ä–µ–∑ returnPressed —Å–∏–≥–Ω–∞–ª—ã –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
        super().keyPressEvent(a0)

    def toggle_password_visibility(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç –≤–∏–¥–∏–º–æ—Å—Ç—å –ø–∞—Ä–æ–ª—è"""
        if self.password_input.echoMode() == QLineEdit.Password:
            self.password_input.setEchoMode(QLineEdit.Normal)
            self.show_password_button.setText("üôà")
            self.show_password_button.setToolTip("–°–∫—Ä—ã—Ç—å –ø–∞—Ä–æ–ª—å")
        else:
            self.password_input.setEchoMode(QLineEdit.Password)
            self.show_password_button.setText("üëÅ")
            self.show_password_button.setToolTip("–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–æ–ª—å")

