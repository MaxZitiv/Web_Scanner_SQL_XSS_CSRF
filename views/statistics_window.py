"""
–û–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
views/statistics_window.py
"""

from PyQt5.QtWidgets import (QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, 
                            QLabel, QTableWidget, QTableWidgetItem, QPushButton, 
                            QTabWidget)
from PyQt5.QtCore import Qt, QRect
from PyQt5.QtCharts import QPieSeries, QBarSeries, QBarSet, QValueAxis
from PyQt5.QtGui import QFont, QPainter
from typing import Optional
from utils.database import db
from utils.logger import logger

class StatisticsWindow(QMainWindow):
    """–û–∫–Ω–æ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–¥—Ä–æ–±–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""

    def __init__(self, user_id: int, parent: Optional[QWidget] = None):
        super().__init__(parent)
        self.user_id: int = user_id
        self.setWindowTitle("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        self.setGeometry(QRect(100, 100, 1200, 800))

        self.setup_ui()
        self.load_statistics()

    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)

        main_layout = QVBoxLayout()

        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title_label = QLabel("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
        title_font = QFont()
        title_font.setPointSize(14)
        title_font.setBold(True)
        title_label.setFont(title_font)
        title_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
        main_layout.addWidget(title_label)

        # –í–∫–ª–∞–¥–∫–∏
        self.tabs = QTabWidget()

        # –í–∫–ª–∞–¥–∫–∞ —Å —Ç–∞–±–ª–∏—Ü–µ–π —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
        self.scans_table = QTableWidget()
        self.scans_table.setColumnCount(6)
        self.scans_table.setHorizontalHeaderLabels([
            "ID —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "URL", "–î–∞—Ç–∞", "–ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π", "–í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è", "–°—Ç–∞—Ç—É—Å"
        ])
        self.tabs.addTab(self.scans_table, "–ò—Å—Ç–æ—Ä–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π")

        # –í–∫–ª–∞–¥–∫–∞ —Å –¥–∏–∞–≥—Ä–∞–º–º–∞–º–∏
        self.charts_widget = QWidget()
        self.charts_layout = QVBoxLayout()
        self.charts_widget.setLayout(self.charts_layout)
        self.tabs.addTab(self.charts_widget, "–î–∏–∞–≥—Ä–∞–º–º—ã")

        # –í–∫–ª–∞–¥–∫–∞ —Å –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–æ–π
        self.stats_widget = QWidget()
        self.stats_layout = QVBoxLayout()
        self.stats_widget.setLayout(self.stats_layout)
        self.tabs.addTab(self.stats_widget, "–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")

        main_layout.addWidget(self.tabs)

        # –ö–Ω–æ–ø–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è
        close_btn = QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
        close_btn.clicked.connect(self.close)
        main_layout.addWidget(close_btn)

        central_widget.setLayout(main_layout)

    def load_statistics(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            self.load_scan_history()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∏–∞–≥—Ä–∞–º–º—ã
            self.load_charts()

            # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.load_general_stats()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def load_scan_history(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π"""
        try:
            conn = db.get_db_connection()
            cursor = conn.cursor()

            cursor.execute("""
                SELECT scan_id, url, start_time, vulnerabilities_found, 
                       scan_duration, status 
                FROM scans 
                WHERE user_id = ? 
                ORDER BY start_time DESC
                LIMIT 100
            """, (self.user_id,))

            rows = cursor.fetchall()
            conn.close()

            self.scans_table.setRowCount(len(rows))

            for i, row in enumerate(rows):
                scan_id = str(row[0])
                url = row[1] if row[1] else "N/A"
                start_time = row[2] if row[2] else "N/A"
                vulns_found = str(row[3]) if row[3] is not None else "0"
                duration = f"{row[4]}—Å" if row[4] else "N/A"
                status = row[5] if row[5] else "N/A"

                self.scans_table.setItem(i, 0, QTableWidgetItem(scan_id))
                self.scans_table.setItem(i, 1, QTableWidgetItem(url))
                self.scans_table.setItem(i, 2, QTableWidgetItem(start_time))
                self.scans_table.setItem(i, 3, QTableWidgetItem(vulns_found))
                self.scans_table.setItem(i, 4, QTableWidgetItem(duration))
                self.scans_table.setItem(i, 5, QTableWidgetItem(status))

            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            self.scans_table.resizeColumnsToContents()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {e}")

    def load_charts(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –¥–∏–∞–≥—Ä–∞–º–º"""
        try:
            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —Ç–∏–ø–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            self.create_vulnerability_pie_chart()

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            self.create_vulnerability_bar_chart()

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∏–∞–≥—Ä–∞–º–º: {e}")

    def create_vulnerability_pie_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —Ç–∏–ø–æ–≤ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π"""
        try:
            conn = db.get_db_connection()
            cursor = conn.cursor()

            cursor.execute("""
                SELECT vulnerability_type, COUNT(*) as count
                FROM scan_results 
                WHERE user_id = ?
                GROUP BY vulnerability_type
            """, (self.user_id,))

            rows = cursor.fetchall()
            conn.close()

            if not rows:
                no_data_label = QLabel("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è")
                no_data_label.setAlignment(Qt.AlignmentFlag.AlignCenter)
                self.charts_layout.addWidget(no_data_label)
                return

            # –°–æ–∑–¥–∞–µ–º –∫—Ä—É–≥–æ–≤—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            series: QPieSeries = QPieSeries()

            for row in rows:
                vuln_type = row[0]
                count = row[1]
                series.append(f"{vuln_type}: {count}", count)

            chart = QChart()
            chart.addSeries(series)
            chart.setTitle("–†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ —Ç–∏–ø–∞–º")
            chart.legend().setVisible(True)
            chart.legend().setAlignment(Qt.AlignRight)

            chart_view = QChartView(chart)
            chart_view.setRenderHint(QPainter.Antialiasing)

            self.charts_layout.addWidget(chart_view)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫—Ä—É–≥–æ–≤–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")

    def create_vulnerability_bar_chart(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π –ø–æ –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            conn = db.get_db_connection()
            cursor = conn.cursor()

            cursor.execute("""
                SELECT DATE(timestamp) as date, vulnerability_type, COUNT(*) as count
                FROM scan_results 
                WHERE user_id = ?
                GROUP BY date, vulnerability_type
                ORDER BY date
                LIMIT 30
            """, (self.user_id,))

            rows = cursor.fetchall()
            conn.close()

            if not rows:
                return

            # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —Ç–∏–ø–∞–º —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            vuln_types = {}
            dates = set()

            for row in rows:
                date = row[0]
                vuln_type = row[1]
                count = row[2]

                dates.add(date)

                if vuln_type not in vuln_types:
                    vuln_types[vuln_type] = {}

                vuln_types[vuln_type][date] = count

            # –°–æ–∑–¥–∞–µ–º —Å—Ç–æ–ª–±—á–∞—Ç—É—é –¥–∏–∞–≥—Ä–∞–º–º—É
            series_list = []
            colors = ["#FF9999", "#66B2FF", "#99FF99"]
            color_index = 0

            for vuln_type, data in vuln_types.items():
                bar_set = QBarSet(vuln_type)
                bar_set.setColor(colors[color_index % len(colors)])
                color_index += 1

                for date in sorted(dates):
                    bar_set.append(data.get(date, 0))

                series_list.append(bar_set)

            chart = QChart()
            chart.setTitle("–î–∏–Ω–∞–º–∏–∫–∞ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")

            axis_x = QValueAxis()
            axis_x.setTitleText("–î–∞—Ç–∞")
            axis_x.setTickCount(min(len(dates), 10))

            axis_y = QValueAxis()
            axis_y.setTitleText("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")

            bar_series = QBarSeries()
            for bar_set in series_list:
                bar_series.append(bar_set)

            chart.addSeries(bar_series)
            chart.addAxis(axis_x, Qt.AlignBottom)
            chart.addAxis(axis_y, Qt.AlignLeft)

            bar_series.attachAxis(axis_x)
            bar_series.attachAxis(axis_y)

            chart.legend().setVisible(True)
            chart.legend().setAlignment(Qt.AlignBottom)

            chart_view = QChartView(chart)
            chart_view.setRenderHint(QPainter.Antialiasing)

            self.charts_layout.addWidget(chart_view)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å—Ç–æ–ª–±—á–∞—Ç–æ–π –¥–∏–∞–≥—Ä–∞–º–º—ã: {e}")

    def load_general_stats(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            conn = db.get_db_connection()
            cursor = conn.cursor()

            # –û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
            cursor.execute("""
                SELECT 
                    COUNT(DISTINCT scan_id) as total_scans,
                    COUNT(*) as total_vulnerabilities,
                    COUNT(DISTINCT url) as unique_urls
                FROM scan_results 
                WHERE user_id = ?
            """, (self.user_id,))

            general_stats = cursor.fetchone()

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            cursor.execute("""
                SELECT vulnerability_type, COUNT(*) as count
                FROM scan_results 
                WHERE user_id = ?
                GROUP BY vulnerability_type
            """, (self.user_id,))

            vuln_stats = cursor.fetchall()

            conn.close()

            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –æ–±—â—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            stats_layout = QVBoxLayout()

            # –ó–∞–≥–æ–ª–æ–≤–æ–∫
            general_title = QLabel("–û–±—â–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            title_font = QFont()
            title_font.setPointSize(12)
            title_font.setBold(True)
            general_title.setFont(title_font)
            stats_layout.addWidget(general_title)

            # –û–±—â–∏–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏
            general_stats_widget = QWidget()
            general_stats_layout = QHBoxLayout()

            if general_stats:
                total_scans = general_stats[0] if general_stats[0] else 0
                total_vulns = general_stats[1] if general_stats[1] else 0
                unique_urls = general_stats[2] if general_stats[2] else 0

                scans_label = QLabel(f"–í—Å–µ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π: {total_scans}")
                vulns_label = QLabel(f"–í—Å–µ–≥–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {total_vulns}")
                urls_label = QLabel(f"–£–Ω–∏–∫–∞–ª—å–Ω—ã—Ö URL: {unique_urls}")

                general_stats_layout.addWidget(scans_label)
                general_stats_layout.addWidget(vulns_label)
                general_stats_layout.addWidget(urls_label)

            general_stats_widget.setLayout(general_stats_layout)
            stats_layout.addWidget(general_stats_widget)

            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
            vuln_title = QLabel("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π")
            vuln_title.setFont(title_font)
            stats_layout.addWidget(vuln_title)

            vuln_stats_widget = QWidget()
            vuln_stats_layout = QHBoxLayout()

            for vuln_type, count in vuln_stats:
                type_label = QLabel(f"{vuln_type}: {count}")
                vuln_stats_layout.addWidget(type_label)

            vuln_stats_widget.setLayout(vuln_stats_layout)
            stats_layout.addWidget(vuln_stats_widget)

            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞—Å—Ç—è–≥–∏–≤–∞—é—â–µ–µ—Å—è –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–æ
            stats_layout.addStretch()

            self.stats_widget.setLayout(stats_layout)

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ–±—â–µ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
