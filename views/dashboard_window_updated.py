"""
–ü–æ–ª–Ω—ã–π –∫–ª–∞—Å—Å DashboardWindow –¥–ª—è –≤–µ–±-—Å–∫–∞–Ω–µ—Ä–∞ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π
views/dashboard_window_optimized.py
"""

import asyncio
from typing import Optional, Dict, Any, TypeVar, List
from PyQt5.QtWidgets import (
        QMainWindow, QWidget, QVBoxLayout, QHBoxLayout, QLineEdit, QSpinBox,
        QCheckBox, QPushButton, QTableWidget, QTableWidgetItem, QTextEdit,
        QLabel, QMessageBox
    )
from PyQt5.QtWidgets import QMessageBox

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
Yes = QMessageBox.Yes  # type: ignore
No = QMessageBox.No  # type: ignore
from PyQt5.QtCore import pyqtSlot # type: ignore
from PyQt5.QtGui import QFont, QColor, QCloseEvent
from qasync import asyncSlot # type: ignore

from models.user_model import UserModel
from controllers.scan_controller import ScanController
from views.statistics_widget import StatisticsWidget
from utils.logger import logger
from utils.security import is_safe_url, validate_input_length
from utils.error_handler import error_handler

T = TypeVar('T')

class DashboardWindow(QMainWindow):
    """–ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –¥–∞—à–±–æ—Ä–¥–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""

    def __init__(self, user_id: int, username: str, user_model: UserModel,
                 parent: Optional[QMainWindow] = None):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫–Ω–∞ –¥–∞—à–±–æ—Ä–¥–∞

        Args:
            user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_model: –ú–æ–¥–µ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            parent: –†–æ–¥–∏—Ç–µ–ª—å—Å–∫–æ–µ –æ–∫–Ω–æ
        """
        super().__init__(parent)

        self.user_id = user_id
        self.username = username
        self.user_model = user_model
        self.scan_controller: Optional[ScanController] = None
        self.current_scan_task: Optional[asyncio.Task[None]] = None
        self.is_scanning = False

        logger.info(f"–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è DashboardWindow –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username} (ID: {user_id})")

        try:
            # ===== –û–°–ù–û–í–ù–´–ï –ü–ê–†–ê–ú–ï–¢–†–´ –û–ö–ù–ê =====
            self.setWindowTitle(f"Web Scanner - {username}")
            self.setGeometry(100, 100, 1400, 950)

            # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
            central_widget = QWidget()
            self.setCentralWidget(central_widget)

            # –ì–ª–∞–≤–Ω—ã–π layout
            main_layout = QVBoxLayout()
            main_layout.setSpacing(10)
            main_layout.setContentsMargins(10, 10, 10, 10)

            # ===== –ü–†–û–§–ò–õ–¨ –ü–û–õ–¨–ó–û–í–ê–¢–ï–õ–Ø =====
            profile_layout = QHBoxLayout()

            profile_label = QLabel(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {username}")
            profile_font = QFont()
            profile_font.setPointSize(10)
            profile_label.setFont(profile_font)
            profile_layout.addWidget(profile_label)

            profile_layout.addStretch()

            # –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
            profile_btn = QPushButton("üë§ –ü—Ä–æ—Ñ–∏–ª—å")
            profile_btn.setMaximumWidth(100)
            profile_btn.clicked.connect(self.on_profile)
            profile_layout.addWidget(profile_btn)

            # –ö–Ω–æ–ø–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            statistics_btn = QPushButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
            statistics_btn.setMaximumWidth(100)
            statistics_btn.clicked.connect(self.on_statistics)
            profile_layout.addWidget(statistics_btn)

            # –ö–Ω–æ–ø–∫–∞ –æ—Ç—á–µ—Ç–æ–≤
            reports_btn = QPushButton("üìã –û—Ç—á–µ—Ç—ã")
            reports_btn.setMaximumWidth(100)
            reports_btn.clicked.connect(self.on_reports)
            profile_layout.addWidget(reports_btn)

            logout_btn = QPushButton("üö™ –í—ã—Ö–æ–¥")
            logout_btn.setMaximumWidth(100)
            logout_btn.clicked.connect(self.on_logout)
            profile_layout.addWidget(logout_btn)

            main_layout.addLayout(profile_layout)

            # ===== –°–¢–†–û–ö–ê –í–í–û–î–ê URL –ò –û–ü–¶–ò–ô =====
            scan_options_layout = QHBoxLayout()

            # URL
            url_label = QLabel("üîó URL:")
            scan_options_layout.addWidget(url_label)

            self.url_input = QLineEdit()
            self.url_input.setPlaceholderText("–í–≤–µ–¥–∏—Ç–µ URL (https://example.com)")
            scan_options_layout.addWidget(self.url_input)

            # –ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            depth_label = QLabel("üìä –ì–ª—É–±–∏–Ω–∞:")
            scan_options_layout.addWidget(depth_label)

            self.max_depth_spinbox = QSpinBox()
            self.max_depth_spinbox.setMinimum(1)
            self.max_depth_spinbox.setMaximum(10)
            self.max_depth_spinbox.setValue(3)
            self.max_depth_spinbox.setMaximumWidth(60)
            scan_options_layout.addWidget(self.max_depth_spinbox)

            # –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
            concurrent_label = QLabel("‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ:")
            scan_options_layout.addWidget(concurrent_label)

            self.max_concurrent_spinbox = QSpinBox()
            self.max_concurrent_spinbox.setMinimum(1)
            self.max_concurrent_spinbox.setMaximum(20)
            self.max_concurrent_spinbox.setValue(5)
            self.max_concurrent_spinbox.setMaximumWidth(60)
            scan_options_layout.addWidget(self.max_concurrent_spinbox)

            main_layout.addLayout(scan_options_layout)

            # ===== –¢–ò–ü–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø =====
            scan_types_layout = QHBoxLayout()

            types_label = QLabel("üîç –¢–∏–ø—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:")
            types_font = QFont()
            types_font.setBold(True)
            types_label.setFont(types_font)
            scan_types_layout.addWidget(types_label)

            self.sql_checkbox = QCheckBox("SQL Injection")
            self.sql_checkbox.setChecked(True)
            scan_types_layout.addWidget(self.sql_checkbox)

            self.xss_checkbox = QCheckBox("XSS")
            self.xss_checkbox.setChecked(True)
            scan_types_layout.addWidget(self.xss_checkbox)

            self.csrf_checkbox = QCheckBox("CSRF")
            self.csrf_checkbox.setChecked(True)
            scan_types_layout.addWidget(self.csrf_checkbox)

            scan_types_layout.addStretch()
            main_layout.addLayout(scan_types_layout)

            # ===== –ö–ù–û–ü–ö–ò –£–ü–†–ê–í–õ–ï–ù–ò–Ø –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï–ú =====
            buttons_layout = QHBoxLayout()
            buttons_layout.setSpacing(5)

            self.start_scan_btn = QPushButton("‚ñ∂ –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
            self.start_scan_btn.setMinimumHeight(35)
            self.start_scan_btn.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    font-weight: bold;
                    padding: 5px;
                }
                QPushButton:hover {
                    background-color: #45a049;
                }
                QPushButton:pressed {
                    background-color: #3d8b40;
                }
            """)
            self.start_scan_btn.clicked.connect(self.on_start_scan)
            buttons_layout.addWidget(self.start_scan_btn)

            self.pause_scan_btn = QPushButton("‚è∏ –ü–∞—É–∑–∞")
            self.pause_scan_btn.setMinimumHeight(35)
            self.pause_scan_btn.clicked.connect(self.on_pause_scan)
            self.pause_scan_btn.setEnabled(False)
            buttons_layout.addWidget(self.pause_scan_btn)

            self.resume_scan_btn = QPushButton("‚ñ∂ –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å")
            self.resume_scan_btn.setMinimumHeight(35)
            self.resume_scan_btn.clicked.connect(self.on_resume_scan)
            self.resume_scan_btn.setEnabled(False)
            buttons_layout.addWidget(self.resume_scan_btn)

            self.stop_scan_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
            self.stop_scan_btn.setMinimumHeight(35)
            self.stop_scan_btn.setStyleSheet("""
                QPushButton {
                    background-color: #f44336;
                    color: white;
                    border: none;
                    border-radius: 5px;
                    font-weight: bold;
                    padding: 5px;
                }
                QPushButton:hover {
                    background-color: #da190b;
                }
                QPushButton:pressed {
                    background-color: #ba0000;
                }
            """)
            self.stop_scan_btn.clicked.connect(self.on_stop_scan)
            self.stop_scan_btn.setEnabled(False)
            buttons_layout.addWidget(self.stop_scan_btn)

            main_layout.addLayout(buttons_layout)

            # ===== –°–û–ó–î–ê–Å–ú –í–ò–î–ñ–ï–¢ –°–¢–ê–¢–ò–°–¢–ò–ö–ò =====
            try:
                self.statistics_widget = StatisticsWidget()
                main_layout.addWidget(self.statistics_widget)
                logger.info("StatisticsWidget —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω")
            except Exception as stats_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ StatisticsWidget: {stats_error}")
                self.statistics_widget = None

            # ===== –¢–ê–ë–õ–ò–¶–ê –†–ï–ó–£–õ–¨–¢–ê–¢–û–í =====
            results_label = QLabel("üìã –ù–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏:")
            results_font = QFont()
            results_font.setBold(True)
            results_font.setPointSize(10)
            results_label.setFont(results_font)
            main_layout.addWidget(results_label)

            self.results_table = QTableWidget()
            self.results_table.setColumnCount(5)
            self.results_table.setHorizontalHeaderLabels([
                "–¢–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–∏",
                "URL",
                "–ü–∞—Ä–∞–º–µ—Ç—Ä",
                "–°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å",
                "–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è"
            ])
            header = self.results_table.horizontalHeader()
            if header is not None:
                header.setStretchLastSection(True)
            else:
                logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤")

            # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            self.results_table.setSelectionBehavior(QTableWidget.SelectionBehavior.SelectRows)
            self.results_table.setMinimumHeight(150)
            self.results_table.setAlternatingRowColors(True)

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
            self.results_table.resizeColumnsToContents()
            main_layout.addWidget(self.results_table)

            # ===== –õ–û–ì –°–û–ë–´–¢–ò–Ø =====
            log_label = QLabel("üìù –õ–æ–≥ —Å–æ–±—ã—Ç–∏–π:")
            log_font = QFont()
            log_font.setBold(True)
            log_font.setPointSize(10)
            log_label.setFont(log_font)
            main_layout.addWidget(log_label)

            self.log_text = QTextEdit()
            self.log_text.setReadOnly(True)
            self.log_text.setMaximumHeight(120)
            self.log_text.setStyleSheet("""
                QTextEdit {
                    background-color: #f5f5f5;
                    border: 1px solid #cccccc;
                    border-radius: 3px;
                    font-family: Courier;
                    font-size: 9pt;
                }
            """)
            main_layout.addWidget(self.log_text)

            # ===== –£–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú MAIN LAYOUT =====
            central_widget.setLayout(main_layout)

            # ===== –ü–†–ò–ú–ï–ù–Ø–ï–ú –°–¢–ò–õ–ò =====
            self.apply_styles()

            logger.info(f"DashboardWindow –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {username}")

        except Exception as e:
            error_msg = f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ DashboardWindow: {e}"
            logger.error(error_msg, exc_info=True)
            error_handler.show_error_message("–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞", error_msg)
            raise

    def apply_styles(self):
        """–ü—Ä–∏–º–µ–Ω—è–µ—Ç —Å—Ç–∏–ª–∏ –∫ –æ–∫–Ω—É"""
        try:
            self.setStyleSheet("""
                QMainWindow {
                    background-color: #ffffff;
                }
                QLabel {
                    color: #333333;
                }
                QLineEdit {
                    border: 1px solid #cccccc;
                    border-radius: 3px;
                    padding: 5px;
                    background-color: #fafafa;
                }
                QLineEdit:focus {
                    border: 2px solid #4CAF50;
                    background-color: #ffffff;
                }
                QSpinBox {
                    border: 1px solid #cccccc;
                    border-radius: 3px;
                    padding: 3px;
                }
                QCheckBox {
                    color: #333333;
                    spacing: 5px;
                }
                QTableWidget {
                    background-color: #ffffff;
                    alternate-background-color: #f9f9f9;
                    border: 1px solid #cccccc;
                    gridline-color: #e0e0e0;
                }
                QTableWidget::item:selected {
                    background-color: #4CAF50;
                }
                QHeaderView::section {
                    background-color: #f0f0f0;
                    padding: 5px;
                    border: 1px solid #cccccc;
                    font-weight: bold;
                }
            """)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∏–ª–µ–π: {e}")

    def on_profile(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è"""
        try:
            from views.edit_profile_window import EditProfileWindow
            profile_window = EditProfileWindow(self.user_id, self.username, self)
            profile_window.exec_()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞ –ø—Ä–æ—Ñ–∏–ª—è: {e}")
            error_handler.show_error_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –ø—Ä–æ—Ñ–∏–ª—è: {str(e)}")

    def on_statistics(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        try:
            if self.statistics_widget:
                self.statistics_widget.set_stats_visible(True)
                # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –≤–∏–¥–∂–µ—Ç—É —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
                self.scroll_to_widget(self.statistics_widget)
            else:
                error_handler.show_error_message("–û—à–∏–±–∫–∞", "–í–∏–¥–∂–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            error_handler.show_error_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É: {str(e)}")

    def on_reports(self):
        """–û—Ç–∫—Ä—ã–≤–∞–µ—Ç –æ–∫–Ω–æ –æ—Ç—á–µ—Ç–æ–≤"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            reports_data = []
            for row in range(self.results_table.rowCount()):
                report_item = {
                    "–¢–∏–ø —É—è–∑–≤–∏–º–æ—Å—Ç–∏": self.results_table.item(row, 0).text(),
                    "URL": self.results_table.item(row, 1).text(),
                    "–ü–∞—Ä–∞–º–µ—Ç—Ä": self.results_table.item(row, 2).text(),
                    "–°–µ—Ä—å—ë–∑–Ω–æ—Å—Ç—å": self.results_table.item(row, 3).text(),
                    "–í—Ä–µ–º—è –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è": self.results_table.item(row, 4).text()
                }
                reports_data.append(report_item)

            if not reports_data:
                error_handler.show_info_message("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –æ—Ç—á–µ—Ç–∞. –°–Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.")
                return

            # –°–æ–∑–¥–∞–µ–º –æ–∫–Ω–æ –æ—Ç—á–µ—Ç–æ–≤
            from utils.export_utils import ExportUtils
            from PyQt5.QtWidgets import QFileDialog, QMessageBox

            # –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤ JSON
            success = ExportUtils.export_data(
                self,
                reports_data,
                "JSON",
                "json",
                self.user_id
            )

            if not success:
                error_handler.show_error_message("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞: {e}")
            error_handler.show_error_message("–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –æ—Ç—á–µ—Ç: {str(e)}")

    def scroll_to_widget(self, widget):
        """–ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ—Ç –∫ —É–∫–∞–∑–∞–Ω–Ω–æ–º—É –≤–∏–¥–∂–µ—Ç—É"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤–µ—Ä—Ç–∏–∫–∞–ª—å–Ω—É—é –ø–æ–ª–æ—Å—É –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
            scroll_bar = self.centralWidget().verticalScrollBar()
            if scroll_bar:
                # –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é –≤–∏–¥–∂–µ—Ç–∞
                widget_pos = widget.y()
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–∑–∏—Ü–∏—é –ø—Ä–æ–∫—Ä—É—Ç–∫–∏
                scroll_bar.setValue(widget_pos)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –∫ –≤–∏–¥–∂–µ—Ç—É: {e}")

    # –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...
    def on_start_scan(self):
        """
        –ù–∞—á–∏–Ω–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–∞–π—Ç–∞.
        –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ, —Å–æ–∑–¥–∞–µ—Ç ScanController –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ.
        """
        try:
            # ===== –í–ê–õ–ò–î–ê–¶–ò–Ø –î–ê–ù–ù–´–• =====

            # –ü–æ–ª—É—á–∞–µ–º URL –∏ —É–¥–∞–ª—è–µ–º –ø—Ä–æ–±–µ–ª—ã
            url = self.url_input.text().strip()

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ URL –Ω–µ –ø—É—Å—Ç–æ–π
            if not url:
                error_handler.show_error_message(
                    "–û—à–∏–±–∫–∞",
                    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
                )
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ URL")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–æ—Ç–æ–∫–æ–ª –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
            if not url.startswith(('http://', 'https://')):
                url = 'https://' + url
                self.url_input.setText(url)
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—Ä–æ—Ç–æ–∫–æ–ª HTTPS. URL: {url}")

            # –í–∞–ª–∏–¥–∏—Ä—É–µ–º –¥–ª–∏–Ω—É URL
            if not validate_input_length(url, 1, 2048):
                error_handler.show_error_message(
                    "–û—à–∏–±–∫–∞",
                    "URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π (–º–∞–∫—Å–∏–º—É–º 2048 —Å–∏–º–≤–æ–ª–æ–≤). "
                    f"–¢–µ–∫—É—â–∞—è –¥–ª–∏–Ω–∞: {len(url)}"
                )
                logger.warning(f"URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π: {len(url)} —Å–∏–º–≤–æ–ª–æ–≤")
                return

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å URL
            if not is_safe_url(url):
                logger.warning(f"–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ URL: {url}")
                reply = QMessageBox.question(
                    self,
                    "‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                    "URL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º. –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å?",
                    "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã",
                    "–∏–ª–∏ —Å–∞–π—Ç—ã, –Ω–∞ –∫–æ—Ç–æ—Ä—ã–µ —É –≤–∞—Å –µ—Å—Ç—å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ.",
                    Yes | No  # type: ignore
                )
                if reply == No:  # type: ignore
                    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    return
                logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ URL")

            # ===== –ü–û–õ–£–ß–ï–ù–ò–ï –ü–ê–†–ê–ú–ï–¢–†–û–í –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø =====

            # –°–æ–±–∏—Ä–∞–µ–º —Ç–∏–ø—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            scan_types: List[str] = []

            if self.sql_checkbox.isChecked():
                scan_types.append("sql")

            if self.xss_checkbox.isChecked():
                scan_types.append("xss")

            if self.csrf_checkbox.isChecked():
                scan_types.append("csrf")

            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—ã–±—Ä–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø
            if not scan_types:
                error_handler.show_error_message(
                    "–û—à–∏–±–∫–∞",
                    "–í—ã–±–µ—Ä–∏—Ç–µ —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "‚Ä¢ SQL Injection",
                    "‚Ä¢ XSS",
                    "‚Ä¢ CSRF"
                )
                logger.warning("–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ–∑ —Ç–∏–ø–æ–≤")
                return

            logger.info(f"–í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ç–∏–ø—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {', '.join(scan_types)}")

            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            max_depth = self.max_depth_spinbox.value()
            max_concurrent = self.max_concurrent_spinbox.value()

            if max_depth < 1 or max_depth > 10:
                error_handler.show_error_message(
                    "–û—à–∏–±–∫–∞",
                    "–ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10"
                )
                return

            if max_concurrent < 1 or max_concurrent > 20:
                error_handler.show_error_message(
                    "–û—à–∏–±–∫–∞",
                    "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20"
                )
                return

            logger.info(f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: –≥–ª—É–±–∏–Ω–∞={max_depth}, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ={max_concurrent}")

            # ===== –°–ë–†–û–° –ü–†–ï–î–´–î–£–©–ò–• –î–ê–ù–ù–´–• =====

            # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            self.results_table.setRowCount(0)
            logger.debug("–¢–∞–±–ª–∏—Ü–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞")

            # –û—á–∏—â–∞–µ–º –ª–æ–≥
            self.log_text.clear()
            logger.debug("–õ–æ–≥ —Å–æ–±—ã—Ç–∏–π –æ—á–∏—â–µ–Ω")

            # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self.reset_scan_stats()
            logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")

            # ===== –°–û–ó–î–ê–ù–ò–ï SCAN CONTROLLER =====

            try:
                self.scan_controller = ScanController(
                    url=url,
                    scan_types=scan_types,
                    user_id=self.user_id,
                    max_depth=max_depth,
                    max_concurrent=max_concurrent,
                    timeout=30,
                    username=self.username
                )
                logger.info(f"ScanController —Å–æ–∑–¥–∞–Ω –¥–ª—è URL: {url}")
            except Exception as controller_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ ScanController: {controller_error}")
                error_handler.show_error_message(
                    "–û—à–∏–±–∫–∞",
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Å–∫–∞–Ω–µ—Ä–∞: {str(controller_error)}"
                )
                return

            # ===== –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï –°–ò–ì–ù–ê–õ–û–í =====

            try:
                self.connect_scan_signals()
                logger.info("–°–∏–≥–Ω–∞–ª—ã ScanController –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            except Exception as signals_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {signals_error}")
                error_handler.show_error_message(
                    "–û—à–∏–±–∫–∞",
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {str(signals_error)}"
                )
                return

            # ===== –û–ë–ù–û–í–õ–ï–ù–ò–ï UI =====

            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            self.is_scanning = True

            # –û—Ç–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å"
            self.start_scan_btn.setEnabled(False)

            # –í–∫–ª—é—á–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
            self.pause_scan_btn.setEnabled(True)
            self.resume_scan_btn.setEnabled(False)
            self.stop_scan_btn.setEnabled(True)

            # –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—è –≤–≤–æ–¥–∞ (–Ω–µ–ª—å–∑—è –º–µ–Ω—è—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è)
            self.url_input.setEnabled(False)
            self.max_depth_spinbox.setEnabled(False)
            self.max_concurrent_spinbox.setEnabled(False)
            self.sql_checkbox.setEnabled(False)
            self.xss_checkbox.setEnabled(False)
            self.csrf_checkbox.setEnabled(False)

            logger.info("UI –æ–±–Ω–æ–≤–ª–µ–Ω –¥–ª—è –Ω–∞—á–∞–ª–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

            # ===== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï –ò –£–í–ï–î–û–ú–õ–ï–ù–ò–ï =====

            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
            self.log_text.append("=" * 70)
            self.log_text.append(f"üöÄ –ù–ê–ß–ò–ù–ê–ï–ú –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–ï")
            self.log_text.append("=" * 70)
            self.log_text.append(f"üìç URL: {url}")
            self.log_text.append(f"üîç –¢–∏–ø—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {', '.join(scan_types)}")
            self.log_text.append(f"üìä –ì–ª—É–±–∏–Ω–∞: {max_depth}")
            self.log_text.append(f"‚ö° –ü–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {max_concurrent}")
            self.log_text.append(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {self.username}")
            self.log_text.append(f"üïê –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞: {self._get_current_time()}")
            self.log_text.append("=" * 70)
            self.log_text.append("")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –ª–æ–≥ –∫ –Ω–∞—á–∞–ª—É
            try:
                scroll_bar = self.log_text.verticalScrollBar()
                if scroll_bar is not None:
                    scroll_bar.setValue(0)
            except AttributeError:
                logger.warning("verticalScrollBar() –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω –¥–ª—è log_text")

            # ===== –ó–ê–ü–£–°–ö –ê–°–ò–ù–•–†–û–ù–ù–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø =====

            try:
                # –ü–æ–ª—É—á–∞–µ–º event loop
                loop = asyncio.get_event_loop()

                # –°–æ–∑–¥–∞—ë–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é –∑–∞–¥–∞—á—É –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                self.current_scan_task = loop.create_task(
                    self.scan_controller.start_scan(
                        url=url,
                        scan_types=scan_types,
                        max_depth=max_depth,
                        max_concurrent=max_concurrent,
                        on_log=self.on_log_event,
                        on_result=self.on_scan_complete
                    )
                )

                logger.info("–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω–∞ –∏ –∑–∞–ø—É—â–µ–Ω–∞")
                self.log_text.append("‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ")

            except Exception as task_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π –∑–∞–¥–∞—á–∏: {task_error}")
                error_handler.show_error_message(
                    "–û—à–∏–±–∫–∞",
                    f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(task_error)}"
                )

                # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º UI –ø—Ä–∏ –æ—à–∏–±–∫–µ
                self.is_scanning = False
                self.start_scan_btn.setEnabled(True)
                self.pause_scan_btn.setEnabled(False)
                self.stop_scan_btn.setEnabled(False)
                self.url_input.setEnabled(True)
                self.max_depth_spinbox.setEnabled(True)
                self.max_concurrent_spinbox.setEnabled(True)
                self.sql_checkbox.setEnabled(True)
                self.xss_checkbox.setEnabled(True)
                self.csrf_checkbox.setEnabled(True)

                self.log_text.append("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
                return

        except Exception as e:
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ on_start_scan: {e}", exc_info=True)
            error_handler.show_error_message(
                "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞",
                f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}

"
                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –¥–ª—è –¥–µ—Ç–∞–ª–µ–π"
            )

            # –ü—ã—Ç–∞–µ–º—Å—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å UI
            try:
                self.is_scanning = False
                self.start_scan_btn.setEnabled(True)
                self.pause_scan_btn.setEnabled(False)
                self.stop_scan_btn.setEnabled(False)
                self.url_input.setEnabled(True)
                self.max_depth_spinbox.setEnabled(True)
                self.max_concurrent_spinbox.setEnabled(True)
                self.sql_checkbox.setEnabled(True)
                self.xss_checkbox.setEnabled(True)
                self.csrf_checkbox.setEnabled(True)
            except Exception as recovery_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–∏ UI: {recovery_error}")

    def _get_current_time(self):
        from datetime import datetime
        return datetime.now().strftime("%H:%M:%S")

    def on_pause_scan(self):
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if self.scan_controller:
                self.scan_controller.pause_scan()
                self.pause_scan_btn.setEnabled(False)
                self.resume_scan_btn.setEnabled(True)
                self.log_text.append("‚è∏ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            error_handler.show_error_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–∏–æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}")

    def on_resume_scan(self):
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if self.scan_controller:
                self.scan_controller.resume_scan()
                self.pause_scan_btn.setEnabled(True)
                self.resume_scan_btn.setEnabled(False)
                self.log_text.append("‚ñ∂ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ")
                logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            error_handler.show_error_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤–æ–∑–æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏: {str(e)}")

    def on_stop_scan(self):
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ?",
                Yes | No  # type: ignore
            )

            if reply == Yes:  # type: ignore
                if self.scan_controller:
                    self.scan_controller.stop_scan()
                    self.is_scanning = False
                    self.start_scan_btn.setEnabled(True)
                    self.pause_scan_btn.setEnabled(False)
                    self.resume_scan_btn.setEnabled(False)
                    self.stop_scan_btn.setEnabled(False)
                    self.url_input.setEnabled(True)
                    self.max_depth_spinbox.setEnabled(True)
                    self.max_concurrent_spinbox.setEnabled(True)
                    self.log_text.append("‚èπ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                    logger.info("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
            error_handler.show_error_message("–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ: {str(e)}")

    def connect_scan_signals(self):
        """–ü–æ–¥–∫–ª—é—á–∞–µ—Ç —Å–∏–≥–Ω–∞–ª—ã –æ—Ç ScanController –∫ UI"""
        try:
            if self.scan_controller is None:
                logger.warning("ScanController –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            if not hasattr(self.scan_controller, 'signals'):
                logger.warning("ScanController –Ω–µ –∏–º–µ–µ—Ç —Å–∏–≥–Ω–∞–ª–æ–≤")
                return

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
            if self.statistics_widget is not None:
                self.scan_controller.signals.stats_updated.connect(
                    self.on_stats_updated
                )
                self.scan_controller.signals.progress_updated.connect(
                    self.statistics_widget.update_progress
                )
                logger.info("–°–∏–≥–Ω–∞–ª—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ")
            else:
                logger.warning("StatisticsWidget –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω, —Å–∏–≥–Ω–∞–ª—ã –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω—ã")

            # –ü–æ–¥–∫–ª—é—á–∞–µ–º –¥—Ä—É–≥–∏–µ —Å–∏–≥–Ω–∞–ª—ã
            self.scan_controller.signals.log_event.connect(self.on_log_event)
            self.scan_controller.signals.vulnerability_found.connect(
                self.on_vulnerability_found
            )

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ —Å–∏–≥–Ω–∞–ª–æ–≤: {e}")

    @pyqtSlot(str, object)
    def on_stats_updated(self, stat_name: str, value: object) -> None:
        """
        –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ ScanWorker

        Args:
            stat_name: –ù–∞–∑–≤–∞–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ (urls_found, forms_scanned –∏ —Ç.–¥.)
            value: –ó–Ω–∞—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ (–º–æ–∂–µ—Ç –±—ã—Ç—å int –∏–ª–∏ str)
        """
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ statistics_widget –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω
            if self.statistics_widget is None:
                logger.debug(f"statistics_widget is None, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ {stat_name}")
                return

            # ===== –ü–†–ï–û–ë–†–ê–ó–û–í–ê–ù–ò–ï –ò –í–ê–õ–ò–î–ê–¶–ò–Ø –ó–ù–ê–ß–ï–ù–ò–Ø =====

            # –õ–æ–≥–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            logger.debug(f"–ü–æ–ª—É—á–µ–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {stat_name} = {value} (—Ç–∏–ø: {type(value).__name__})")

            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –∑–Ω–∞—á–µ–Ω–∏–π
            if stat_name == 'scan_time':
                # –í—Ä–µ–º—è –ø–µ—Ä–µ–¥–∞—ë—Ç—Å—è –∫–∞–∫ —Å—Ç—Ä–æ–∫–∞ (HH:MM:SS)
                try:
                    time_str = str(value) if value is not None else "00:00:00"
                    self.statistics_widget.update_stat_string(stat_name, time_str)
                    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {time_str}")
                except Exception as time_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–∏: {time_error}")
                    self.statistics_widget.update_stat_string(stat_name, "00:00:00")

            else:
                # –í—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ —Å—á—ë—Ç—á–∏–∫–∏ - —Ü–µ–ª—ã–µ —á–∏—Å–ª–∞
                try:
                    # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –≤ int
                    if value is None:
                        value_int = 0
                    elif isinstance(value, int):
                        value_int = value
                    elif isinstance(value, str):
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Å—Ç—Ä–æ–∫—É –≤ int
                        value_int = int(value)
                    elif isinstance(value, float):
                        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º float –≤ int
                        value_int = int(value)
                    else:
                        # –ü—ã—Ç–∞–µ–º—Å—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —á–µ—Ä–µ–∑ str
                        try:
                            value_int = int(str(value))
                        except (ValueError, TypeError):
                            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å {stat_name} = {value} –≤ int, –∏—Å–ø–æ–ª—å–∑—É–µ–º 0")
                            value_int = 0

                    # –ì–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ–º —á—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –≤ –¥–æ–ø—É—Å—Ç–∏–º–æ–º –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                    if value_int < 0:
                        logger.warning(f"–û—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è {stat_name}: {value_int}, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º 0")
                        value_int = 0

                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤ UI
                    self.statistics_widget.update_stat(stat_name, value_int)
                    logger.debug(f"–û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ {stat_name}: {value_int}")

                except (ValueError, TypeError) as conv_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è {stat_name} —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º {value}: {conv_error}")
                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º 0 –ø—Ä–∏ –æ—à–∏–±–∫–µ
                    try:
                        self.statistics_widget.update_stat(stat_name, 0)
                    except Exception as fallback_error:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ –∑–Ω–∞—á–µ–Ω–∏—è 0: {fallback_error}")

                except AttributeError as attr_error:
                    logger.error(f"–ú–µ—Ç–æ–¥ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è {stat_name} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {attr_error}")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ on_stats_updated –¥–ª—è {stat_name}: {e}", exc_info=True)

    @pyqtSlot(str)
    def on_log_event(self, message: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–±—ã—Ç–∏–π –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            if not hasattr(self, 'log_text'):
                logger.warning("log_text –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
                return

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
            self.log_text.append(message)
            logger.debug(f"–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –ª–æ–≥: {message}")

            # –ü—Ä–æ–∫—Ä—É—á–∏–≤–∞–µ–º –∫ –ø–æ—Å–ª–µ–¥–Ω–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            try:
                scroll_bar = self.log_text.verticalScrollBar()

                if scroll_bar is not None:
                    max_value = scroll_bar.maximum()
                    scroll_bar.setValue(max_value)
                else:
                    logger.warning("verticalScrollBar() –≤–µ—Ä–Ω—É–ª None –¥–ª—è log_text")
            except AttributeError as attr_error:
                logger.warning(f"ScrollBar –∞—Ç—Ä–∏–±—É—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω: {attr_error}")
            except Exception as scroll_error:
                logger.debug(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–µ –ª–æ–≥–æ–≤: {scroll_error}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–∏ —Å–æ–±—ã—Ç–∏—è: {e}")

    @pyqtSlot(str, str, str)
    def on_vulnerability_found(self, url: str, vulnerability_type: str, details: str):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞—Ö–æ–∂–¥–µ–Ω–∏—è —É—è–∑–≤–∏–º–æ—Å—Ç–∏"""
        try:
            row = self.results_table.rowCount()
            self.results_table.insertRow(row)

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ü–≤–µ—Ç –ø–æ —Ç–∏–ø—É —É—è–∑–≤–∏–º–æ—Å—Ç–∏
            if vulnerability_type.lower() == 'sql':
                color = QColor("#ffcccc")
            elif vulnerability_type.lower() == 'xss':
                color = QColor("#ffffcc")
            else:  # CSRF
                color = QColor("#ccffcc")

            # –ó–∞–ø–æ–ª–Ω—è–µ–º —è—á–µ–π–∫–∏
            type_item = QTableWidgetItem(vulnerability_type)
            type_item.setBackground(color)
            self.results_table.setItem(row, 0, type_item)

            url_item = QTableWidgetItem(url)
            url_item.setBackground(color)
            self.results_table.setItem(row, 1, url_item)

            details_item = QTableWidgetItem(details)
            details_item.setBackground(color)
            self.results_table.setItem(row, 2, details_item)

            severity_item = QTableWidgetItem("–í—ã—Å–æ–∫–∞—è")
            severity_item.setBackground(color)
            self.results_table.setItem(row, 3, severity_item)

            from utils.performance import get_local_timestamp
            time_item = QTableWidgetItem(get_local_timestamp())
            time_item.setBackground(color)
            self.results_table.setItem(row, 4, time_item)

            logger.info(f"–ù–∞–π–¥–µ–Ω–∞ —É—è–∑–≤–∏–º–æ—Å—Ç—å: {vulnerability_type} –Ω–∞ {url}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—è–∑–≤–∏–º–æ—Å—Ç–∏ –≤ —Ç–∞–±–ª–∏—Ü—É: {e}")

    @asyncSlot(dict)  # type: ignore
    def on_scan_complete(self, result: Dict[str, Any]):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            self.is_scanning = False
            self.start_scan_btn.setEnabled(True)
            self.pause_scan_btn.setEnabled(False)
            self.resume_scan_btn.setEnabled(False)
            self.stop_scan_btn.setEnabled(False)
            self.url_input.setEnabled(True)
            self.max_depth_spinbox.setEnabled(True)
            self.max_concurrent_spinbox.setEnabled(True)

            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            total_vulns = result.get('total_vulnerabilities', 0)
            total_urls = result.get('total_urls_scanned', 0)
            scan_duration = result.get('scan_duration', 0)

            self.log_text.append(f"‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
            self.log_text.append(f"üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
            self.log_text.append(f"  ‚Ä¢ –ü—Ä–æ—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ URL: {total_urls}")
            self.log_text.append(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {total_vulns}")
            self.log_text.append(f"  ‚Ä¢ –í—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {scan_duration:.2f}s")

            logger.info(f"–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –ù–∞–π–¥–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {total_vulns}")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")

    def reset_scan_stats(self) -> None:
        """–°–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏ –Ω–æ–≤–æ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""
        try:
            if self.statistics_widget is not None:
                self.statistics_widget.reset_stats()
                logger.info("–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–±—Ä–æ—à–µ–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±—Ä–æ—Å–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")

    def on_logout(self):
        """
        –í—ã—Ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–∏—Å—Ç–µ–º—ã
        –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –æ–∫–Ω—É –≤—Ö–æ–¥–∞
        """
        try:
            # ===== –ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò–ï –í–´–•–û–î–ê =====

            reply = QMessageBox.question(
                self,
                "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏?",
                Yes | No  # type: ignore
            )

            if reply != Yes:  # type: ignore
                logger.info("–í—ã—Ö–æ–¥ –æ—Ç–º–µ–Ω—ë–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                return

            # ===== –û–°–¢–ê–ù–û–í–ö–ê –ê–ö–¢–ò–í–ù–û–ì–û –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø =====

            if self.is_scanning:
                logger.info("–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤—ã—Ö–æ–¥–æ–º...")
                try:
                    self.on_stop_scan()
                except Exception as stop_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {stop_error}")

            # ===== –û–ß–ò–°–¢–ö–ê –î–ê–ù–ù–´–• =====

            try:
                # –û—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                if hasattr(self, 'user_model'):
                    self.user_model.logout_user()
                    logger.info("–î–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—á–∏—â–µ–Ω—ã")
            except Exception as cleanup_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: {cleanup_error}")

            # ===== –í–û–ó–í–†–ê–¢ –ö –û–ö–ù–£ –í–•–û–î–ê =====

            try:
                # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π –≤–∏–¥–∂–µ—Ç
                parent = self.parent()

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ parent —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥ go_to_login
                if parent is not None and hasattr(parent, 'go_to_login'):
                    logger.info("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ–∫–Ω—É –≤—Ö–æ–¥–∞ —á–µ—Ä–µ–∑ parent.go_to_login()")
                    parent.go_to_login()  # type: ignore
                else:
                    # –ï—Å–ª–∏ parent –Ω–µ –ø–æ–¥—Ö–æ–¥–∏—Ç, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ MainWindow
                    logger.warning("Parent –Ω–µ –∏–º–µ–µ—Ç –º–µ—Ç–æ–¥–∞ go_to_login, –∏—â–µ–º MainWindow...")

                    # –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ MainWindow —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É —Ä–æ–¥–∏—Ç–µ–ª–µ–π
                    main_window = self._find_main_window()

                    if main_window is not None and hasattr(main_window, 'go_to_login'):
                        logger.info("–ù–∞–π–¥–µ–Ω MainWindow, –≤—ã–∑—ã–≤–∞–µ–º go_to_login()")
                        main_window.go_to_login()  # type: ignore
                    else:
                        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ MainWindow, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º —Ç–µ–∫—É—â–µ–µ –æ–∫–Ω–æ
                        logger.warning("MainWindow –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º DashboardWindow")
                        self.close()

            except Exception as navigation_error:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –∫ –æ–∫–Ω—É –≤—Ö–æ–¥–∞: {navigation_error}")
                # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –ø—Ä–æ—Å—Ç–æ –∑–∞–∫—Ä—ã–≤–∞–µ–º –æ–∫–Ω–æ
                try:
                    self.close()
                except Exception as close_error:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞: {close_error}")

            # ===== –õ–û–ì–ò–†–û–í–ê–ù–ò–ï =====

            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {self.username} –≤—ã—à–µ–ª –∏–∑ —Å–∏—Å—Ç–µ–º—ã")

        except Exception as e:
            logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {e}", exc_info=True)
            error_handler.show_error_message(
                "–û—à–∏–±–∫–∞",
                f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ: {str(e)}"
            )
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ –≤ –ª—é–±–æ–º —Å–ª—É—á–∞–µ
            try:
                self.close()
            except Exception as final_error:
                logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–∫—Ä—ã—Ç—å –æ–∫–Ω–æ: {final_error}")


    def _find_main_window(self):
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ (MainWindow) —á–µ—Ä–µ–∑ —Ü–µ–ø–æ—á–∫—É —Ä–æ–¥–∏—Ç–µ–ª–µ–π

        Returns:
            MainWindow –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
        """
        try:
            # –ù–∞—á–∏–Ω–∞–µ–º —Å —Ç–µ–∫—É—â–µ–≥–æ –≤–∏–¥–∂–µ—Ç–∞
            current = self

            # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ü–µ–ø–æ—á–∫–µ —Ä–æ–¥–∏—Ç–µ–ª–µ–π
            max_iterations = 10  # –ó–∞—â–∏—Ç–∞ –æ—Ç –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–≥–æ —Ü–∏–∫–ª–∞
            iteration = 0

            while current is not None and iteration < max_iterations:  # type: ignore
                iteration += 1

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–º—è –∫–ª–∞—Å—Å–∞
                class_name = current.__class__.__name__  # type: ignore

                if class_name == 'MainWindow':
                    logger.debug(f"MainWindow –Ω–∞–π–¥–µ–Ω –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}")
                    return current

                # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Ä–æ–¥–∏—Ç–µ–ª—é
                parent = current.parent()

                if parent is None:
                    logger.debug(f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –∫–æ—Ä–µ–Ω—å –∏–µ—Ä–∞—Ä—Ö–∏–∏ –Ω–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏ {iteration}")
                    break

                current = parent

            logger.warning("MainWindow –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∏–µ—Ä–∞—Ä—Ö–∏–∏ –≤–∏–¥–∂–µ—Ç–æ–≤")
            return None

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ MainWindow: {e}")
            return None

    def closeEvent(self, a0: Optional[QCloseEvent]) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        try:
            if self.is_scanning:
                # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–æ–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –∫–æ–Ω—Å—Ç–∞–Ω—Ç
                reply = QMessageBox.question(
                    self,
                    "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ",
                    "–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –µ—â—ë –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è. –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫—Ä—ã—Ç—å?",
                    Yes | No  # type: ignore
                )

                if reply == No:  # type: ignore
                    if a0 is not None:
                        a0.ignore()
                    return

                self.on_stop_scan()

            logger.info(f"–û–∫–Ω–æ –¥–∞—à–±–æ—Ä–¥–∞ –∑–∞–∫—Ä—ã—Ç–æ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {self.username}")
            if a0 is not None:
                a0.accept()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –æ–∫–Ω–∞: {e}")
            if a0 is not None:
                a0.accept()
