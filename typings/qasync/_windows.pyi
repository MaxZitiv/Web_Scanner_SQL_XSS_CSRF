"""
This type stub file was generated by pyright.
"""

import asyncio
from asyncio import windows_events
from . import QtCore
from ._common import with_logger

"""
Windows specific qasync functionality.

Copyright (c) 2018 Gerard Marull-Paretas <gerard@teslabs.com>
Copyright (c) 2014 Mark Harviston <mark.harviston@gmail.com>
Copyright (c) 2014 Arve Knudsen <arve.knudsen@gmail.com>

BSD License
"""
UINT32_MAX = ...
class _ProactorEventLoop(asyncio.ProactorEventLoop):
    """Proactor based event loop."""
    def __init__(self) -> None:
        ...
    


@with_logger
class _IocpProactor(windows_events.IocpProactor):
    def __init__(self) -> None:
        ...
    
    def select(self, timeout=...): # -> list[Any]:
        """Override in order to handle events in a threadsafe manner."""
        ...
    
    def close(self): # -> None:
        ...
    
    def recv(self, conn, nbytes, flags=...): # -> Future[bytes]:
        ...
    
    def recv_into(self, conn, buf, flags=...): # -> Future[Any]:
        ...
    
    def recvfrom(self, conn, nbytes, flags=...): # -> Future[tuple[bytes, _RetAddress]]:
        ...
    
    def recvfrom_into(self, conn, buf, flags=...): # -> Future[tuple[int, _RetAddress]]:
        ...
    
    def sendto(self, conn, buf, flags=..., addr=...): # -> Future[int]:
        ...
    
    def send(self, conn, buf, flags=...): # -> Future[Any]:
        ...
    
    def accept(self, listener): # -> Future[Any]:
        ...
    
    def connect(self, conn, address): # -> Future[Any]:
        ...
    
    def sendfile(self, sock, file, offset, count): # -> Future[Any]:
        ...
    
    def accept_pipe(self, pipe): # -> Future[Any]:
        ...
    


@with_logger
class _EventWorker(QtCore.QThread):
    def __init__(self, proactor, parent) -> None:
        ...
    
    def start(self): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    
    def run(self): # -> None:
        ...
    


@with_logger
class _EventPoller:
    """Polling of events in separate thread."""
    def __init__(self, sig_events) -> None:
        ...
    
    def start(self, proactor): # -> None:
        ...
    
    def stop(self): # -> None:
        ...
    


