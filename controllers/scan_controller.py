from scanner.scanner_fixed import ScanWorker
from utils.logger import logger, log_and_notify
import asyncio
from typing import Callable, List, Optional, Dict, Any, Tuple, cast
from utils.performance import performance_monitor, get_local_timestamp
from utils.security import is_safe_url, validate_input_length
from utils.error_handler import error_handler

class ScanController:
    def __init__(self, url: str, scan_types: List[str], user_id: int, max_depth: int = 2,
                 max_concurrent: int = 5, timeout: int = 30, username: Optional[str] = None):
        """
        –ö–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º.
        :param url: URL –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        :param scan_types: –°–ø–∏—Å–æ–∫ —Ç–∏–ø–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        :param user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        :param max_depth: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∞—è –≥–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        :param max_concurrent: –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
        :param timeout: –¢–∞–π–º–∞—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        :param username: –ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        """
        self.url: str = url
        self.scan_types: List[str] = scan_types
        self.user_id: int = user_id
        self.max_depth: int = max_depth
        self.max_concurrent: int = max_concurrent
        self.timeout: int = timeout
        self.username: Optional[str] = username
        self.active_scans: Dict[str, ScanWorker] = {}
        self.max_active_scans: int = max_concurrent
        logger.info(f'Initialized Async ScanController for user {self.user_id} to scan {url}')

    async def scan(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
        try:
            # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π ScanWorker
            worker = ScanWorker(
                url=self.url,
                scan_types=self.scan_types,
                user_id=self.user_id,
                max_depth=self.max_depth,
                max_concurrent=self.max_concurrent,
                timeout=self.timeout
            )

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è—Ö
            scan_id = get_local_timestamp()
            self.active_scans[scan_id] = worker

            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            results = await worker.run_scan()

            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            del self.active_scans[scan_id]

            return results

        except Exception as e:
            logger.error(f"Error during scan: {e}")
            raise

    def _validate_scan_parameters(self, url: str, scan_types: List[str], max_depth: int, 
                                 max_concurrent: int, timeout: int) -> Tuple[bool, str]:
        """–í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
        try:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ URL
            if not url:
                return False, "URL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if not scan_types:
                return False, "–î–æ–ª–∂–µ–Ω –±—ã—Ç—å —É–∫–∞–∑–∞–Ω —Ö–æ—Ç—è –±—ã –æ–¥–∏–Ω —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ max_depth
            if max_depth < 1 or max_depth > 10:
                return False, "–ì–ª—É–±–∏–Ω–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç 1 –¥–æ 10"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ max_concurrent
            if max_concurrent < 1 or max_concurrent > 20:
                return False, "–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 20"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ timeout
            if timeout < 5 or timeout > 300:
                return False, "–¢–∞–π–º–∞—É—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –æ—Ç 5 –¥–æ 300 —Å–µ–∫—É–Ω–¥"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            if len(self.active_scans) >= self.max_active_scans:
                return False, f"–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π ({self.max_active_scans})"
            
            return True, ""
            
        except Exception as e:
            log_and_notify('error', f"Error validating scan parameters: {e}")
            return False, "–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤"

    def _cleanup_completed_scans(self) -> None:
        """–û—á–∏—â–∞–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö."""
        try:
            completed_urls: List[str] = []
            for url, worker in self.active_scans.items():
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –∞—Ç—Ä–∏–±—É—Ç–∞ should_stop –∏ –µ–≥–æ –∑–Ω–∞—á–µ–Ω–∏–µ
                should_stop = getattr(worker, 'should_stop', None)
                if should_stop is not None and should_stop:
                    completed_urls.append(url)
            
            for url in completed_urls:
                del self.active_scans[url]
                logger.debug(f"Cleaned up completed scan for {url}")
                
        except Exception as e:
            log_and_notify('error', f"Error cleaning up completed scans: {e}")

    async def start_scan(
        self,
        url: str,
        scan_types: List[str],
        max_depth: int = 3,
        max_concurrent: int = 5,
        timeout: int = 30,
        on_progress: Optional[Callable[[float], None]] = None,
        on_log: Optional[Callable[[str, str], None]] = None,
        on_vulnerability: Optional[Callable[[str, int], None]] = None,
        on_result: Optional[Callable[[Dict[str, Any]], None]] = None,
        max_coverage_mode: bool = False
    ) -> None:
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–µ–±-—Å–∞–π—Ç–∞"""
        try:
            # –û—á–∏—â–∞–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            self._cleanup_completed_scans()
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            is_valid, error_message = self._validate_scan_parameters(url, scan_types, max_depth, max_concurrent, timeout)
            if not is_valid:
                error_handler.show_error_message("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", error_message)
                return
            
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ö–æ–¥–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
            if not validate_input_length(url, 1, 2048):
                error_handler.show_error_message("–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏", "URL —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                return
            
            if not is_safe_url(url):
                error_handler.show_warning_message("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", 
                    "URL –º–æ–∂–µ—Ç –±—ã—Ç—å –Ω–µ–±–µ–∑–æ–ø–∞—Å–Ω—ã–º. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã —Å–∫–∞–Ω–∏—Ä—É–µ—Ç–µ —Ç–æ–ª—å–∫–æ —Å–≤–æ–∏ —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ —Å–∞–π—Ç—ã.")
            
            # –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            scan_start_time = performance_monitor.start_timer()
            
            # –õ–æ–≥–∏—Ä—É–µ–º –Ω–∞—á–∞–ª–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            logger.info(f"Starting scan for URL: {url} with types: {scan_types}")
            if on_log:
                on_log(f"üöÄ –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {url}", "INFO")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            results = await self._perform_scan(url, scan_types, max_depth, max_concurrent, timeout,
                                             on_progress, on_log, on_vulnerability, max_coverage_mode)
            
            # –ó–∞–≤–µ—Ä—à–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
            performance_monitor.end_timer("scan_operation", scan_start_time)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            scan_result: Dict[str, Any] = {
                'url': url,
                'scan_types': scan_types,
                'timestamp': get_local_timestamp(),
                'results': results.get('results', {}),
                'scan_duration': results.get('scan_duration', 0),
                'total_urls_scanned': results.get('total_urls_scanned', 0),
                'total_forms_scanned': results.get('total_forms_scanned', 0),
                'total_vulnerabilities': results.get('total_vulnerabilities', 0),
                'unscanned_urls': results.get('unscanned_urls', []),
                'coverage_percent': results.get('coverage_percent', 0),
                'performance_metrics': {
                    'scan_duration': results.get('scan_duration', 0),
                    'system_info': performance_monitor.get_system_info()
                }
            }
            
            # –í—ã–∑—ã–≤–∞–µ–º callback —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–º
            if on_result:
                if asyncio.iscoroutinefunction(on_result):
                    await on_result(scan_result)
                else:
                    on_result(scan_result)
            
            logger.info(f"Scan completed for URL: {url}")
            
        except Exception as e:
            error_handler.handle_network_error(e, "start_scan")
            log_and_notify('error', f"Error in start_scan: {e}")
            if on_log:
                on_log(f"‚ùå –û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: {str(e)}", "ERROR")

    async def _perform_scan(self, url: str, scan_types: List[str], max_depth: int, 
                           max_concurrent: int, timeout: int,
                           on_progress: Optional[Callable[[float], None]] = None,
                           on_log: Optional[Callable[[str, str], None]] = None,
                           on_vulnerability: Optional[Callable[[str, int], None]] = None,
                           max_coverage_mode: bool = False) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º scan_types –≤ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –Ω–æ–≤–æ–≥–æ ScanWorker
            scan_types_lower: List[str] = []
            for scan_type in scan_types:
                # scan_type –≤—Å–µ–≥–¥–∞ –∏–º–µ–µ—Ç —Ç–∏–ø str –∏–∑-–∑–∞ –∞–Ω–Ω–æ—Ç–∞—Ü–∏–∏ List[str]
                if 'sql' in scan_type.lower():
                    scan_types_lower.append('sql')
                elif 'xss' in scan_type.lower():
                    scan_types_lower.append('xss')
                elif 'csrf' in scan_type.lower():
                    scan_types_lower.append('csrf')
            
            # –ï—Å–ª–∏ scan_types –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω—ã, –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ —Ç–∏–ø—ã
            if not scan_types_lower:
                scan_types_lower = ['sql', 'xss', 'csrf']
            
            if on_log:
                on_log(f"üîç –ù–∞—á–∏–Ω–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {', '.join(scan_types_lower)}", "INFO")
            
            # –°–æ–∑–¥–∞–µ–º –æ–¥–∏–Ω ScanWorker –¥–ª—è –≤—Å–µ—Ö —Ç–∏–ø–æ–≤ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            worker = ScanWorker(
                url=url,
                scan_types=scan_types_lower,
                user_id=self.user_id,
                username=self.username,
                max_depth=max_depth,
                max_concurrent=max_concurrent,
                timeout=timeout
            )
            
            # –ü–µ—Ä–µ–¥–∞–µ–º —Ñ–ª–∞–≥ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–≥–æ –ø–æ–∫—Ä—ã—Ç–∏—è
            worker.max_coverage_mode = max_coverage_mode
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º callbacks
            if on_progress:
                worker.signals.progress.connect(on_progress)
            if on_log:
                worker.signals.log_event.connect(on_log)
            if on_vulnerability:
                worker.signals.vulnerability_found.connect(on_vulnerability)
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
            self.active_scans[url] = worker
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
            scan_results = await worker.scan()
            
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
            if url in self.active_scans:
                del self.active_scans[url]
            
            return scan_results
            
        except Exception as e:
            log_and_notify('error', f"Error in _perform_scan: {e}")
            # –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–π –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            if url in self.active_scans:
                del self.active_scans[url]
            raise

    def stop_scan(self, url: Optional[str] = None) -> None:
        """–û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if url:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if url in self.active_scans:
                    worker = self.active_scans[url]
                    worker.stop()
                    logger.info(f"Stopped scan for URL: {url}")
                else:
                    logger.warning(f"Scan for URL {url} not found in active scans")
            else:
                # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                for url, worker in self.active_scans.items():
                    worker.stop()
                    logger.info(f"Stopped scan for URL: {url}")
                
        except Exception as e:
            log_and_notify('error', f"Error stopping scan: {e}")

    def pause_scan(self, url: Optional[str] = None) -> None:
        """–ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if url:
                # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if url in self.active_scans:
                    worker = self.active_scans[url]
                    worker.pause()
                    logger.info(f"Paused scan for URL: {url}")
                else:
                    logger.warning(f"Scan for URL {url} not found in active scans")
            else:
                # –ü—Ä–∏–æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                for url, worker in self.active_scans.items():
                    worker.pause()
                    logger.info(f"Paused scan for URL: {url}")
                
        except Exception as e:
            log_and_notify('error', f"Error pausing scan: {e}")

    def resume_scan(self, url: Optional[str] = None) -> None:
        """–í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ"""
        try:
            if url:
                # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
                if url in self.active_scans:
                    worker = self.active_scans[url]
                    worker.resume()
                    logger.info(f"Resumed scan for URL: {url}")
                else:
                    logger.warning(f"Scan for URL {url} not found in active scans")
            else:
                # –í–æ–∑–æ–±–Ω–æ–≤–ª—è–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                for url, worker in self.active_scans.items():
                    worker.resume()
                    logger.info(f"Resumed scan for URL: {url}")
                
        except Exception as e:
            log_and_notify('error', f"Error resuming scan: {e}")

    async def save_scan_result(self, result: Dict[str, Any]) -> None:
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö"""
        try:
            from utils.database import db
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            url = result.get('url', '')
            scan_types = result.get('scan_types', [])
            scan_duration = result.get('scan_duration', 0.0)
            
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è
            results_list: List[Dict[str, Any]] = []
            results_dict = result.get('results', {})
            
            for vuln_type, vuln_data in results_dict.items():
                if isinstance(vuln_data, list):
                    for vuln in cast(List[Dict[str, Any]], vuln_data):
                        vuln['type'] = vuln_type
                        results_list.append(vuln)
                elif isinstance(vuln_data, dict):
                    vuln_data = cast(Dict[str, Any], vuln_data)
                    vuln_data['type'] = vuln_type
                    results_list.append(vuln_data)
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            if len(scan_types) > 1:
                scan_type = "comprehensive"
            elif len(scan_types) == 1:
                scan_type = scan_types[0].lower().replace(" ", "_")
            else:
                scan_type = "general"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            success = db.save_scan_async(
                user_id=self.user_id,
                url=url,
                results=results_list,
                scan_type=scan_type,
                scan_duration=scan_duration
            )
            
            if success:
                logger.info(f"Scan result saved successfully for URL: {url}")
            else:
                log_and_notify('error', f"Failed to save scan result for URL: {url}")
                
        except Exception as e:
            log_and_notify('error', f"Error saving scan result: {e}")
