import json
import sqlite3
from typing import Dict, Any, Optional

from fpdf import FPDF

from utils.database import db
from utils.logger import logger, log_and_notify
from utils.performance import format_duration


class ScanReportGenerator:
    """–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–µ—Ç–∞–ª—å–Ω—ã—Ö –æ—Ç—á–µ—Ç–æ–≤ –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏"""

    def __init__(self, scan_id: int):
        self.scan_id = scan_id
        self.scan_data = self._get_scan_data()
        if not self.scan_data:
            raise ValueError(f"–°–∫–∞–Ω —Å ID {self.scan_id} –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            
    def _get_scan_data(self) -> Optional[Dict[str, Any]]:
        """–ü–æ–ª—É—á–∞–µ—Ç –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –∏–∑ –ë–î"""
        conn = db.get_db_connection()
        conn.row_factory = sqlite3.Row
        try:
            cursor = conn.cursor()
            cursor.execute("SELECT * FROM scans WHERE id = ?", (self.scan_id,))
            scan = cursor.fetchone()
            if not scan:
                return None
            
            scan_dict = dict(scan)
            
            # –ü–∞—Ä—Å–∏–º JSON-–ø–æ–ª—è
            try:
                scan_dict['vulnerabilities'] = json.loads(scan_dict.get('vulnerabilities', '{}'))
            except (json.JSONDecodeError, TypeError):
                scan_dict['vulnerabilities'] = {}

            try:
                scan_dict['settings'] = json.loads(scan_dict.get('settings', '{}'))
            except (json.JSONDecodeError, TypeError):
                scan_dict['settings'] = {}
            
            return scan_dict
        finally:
            # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –±–æ–ª—å—à–µ –Ω–µ –Ω—É–∂–Ω–æ –∑–∞–∫—Ä—ã–≤–∞—Ç—å –∑–¥–µ—Å—å, 
            # —Ç–∞–∫ –∫–∞–∫ –æ–Ω–æ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è —Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ.
            pass

    def generate_full_report(self) -> str:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç—á–µ—Ç"""
        if not self.scan_data:
            return "–û—Ç—á–µ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: –¥–∞–Ω–Ω—ã–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω—ã."

        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        target_url = self.scan_data.get('url', 'N/A')
        duration_sec = self.scan_data.get('duration', 0)
        
        settings = self.scan_data.get('settings', {})
        depth = settings.get('max_depth', 0)
        concurrent = settings.get('max_concurrent', 'N/A')
        timeout = settings.get('timeout', 'N/A')
        
        vulns = self.scan_data.get('vulnerabilities', {})
        sql_vulns = vulns.get('sql', [])
        xss_vulns = vulns.get('xss', [])
        csrf_vulns = vulns.get('csrf', [])
        
        total_vulns = len(sql_vulns) + len(xss_vulns) + len(csrf_vulns)
        
        # –°—á–∏—Ç–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–æ–≤–µ—Ä–æ–∫
        total_urls = self.scan_data.get('total_urls_scanned', 0)
        total_forms = self.scan_data.get('total_forms_scanned', 0)
        total_checks = total_urls + total_forms
        
        perf_per_level = (duration_sec / depth) if depth > 0 else duration_sec

        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        if total_vulns == 0:
            security_level = "üü¢ –ë–ï–ó–û–ü–ê–°–ù–û"
            recommendations = [
                "‚Ä¢ –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏",
                "‚Ä¢ –°–ª–µ–¥–∏—Ç–µ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤",
                "‚Ä¢ –í–µ–¥–∏—Ç–µ –∂—É—Ä–Ω–∞–ª –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"
            ]
            recommendations_title = "üü¢ –°–ò–°–¢–ï–ú–ê –ë–ï–ó–û–ü–ê–°–ù–ê:"
        elif total_vulns <= 5:
            security_level = "üü° –°–†–ï–î–ù–ò–ô –†–ò–°–ö"
            recommendations = [
                "‚Ä¢ –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ —É—Å—Ç—Ä–∞–Ω–∏—Ç–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏.",
                "‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π —Ä—É—á–Ω–æ–π –∞–Ω–∞–ª–∏–∑ –∫–æ–¥–∞.",
                "‚Ä¢ –£—Å–∏–ª—å—Ç–µ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–≤–æ–¥–∞."
            ]
            recommendations_title = "üü° –û–ë–ù–ê–†–£–ñ–ï–ù–´ –£–Ø–ó–í–ò–ú–û–°–¢–ò:"
        else:
            security_level = "üî¥ –í–´–°–û–ö–ò–ô –†–ò–°–ö"
            recommendations = [
                "‚Ä¢ –°–†–û–ß–ù–û! –£—Å—Ç—Ä–∞–Ω–∏—Ç–µ –≤—Å–µ —É—è–∑–≤–∏–º–æ—Å—Ç–∏.",
                "‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è.",
                "‚Ä¢ –ü—Ä–æ–≤–µ–¥–∏—Ç–µ –ø–æ–ª–Ω—ã–π –∞—É–¥–∏—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏–µ–º —ç–∫—Å–ø–µ—Ä—Ç–æ–≤."
            ]
            recommendations_title = "üî¥ –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ô –£–†–û–í–ï–ù–¨ –£–ì–†–û–ó–´:"

        # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
        report_lines = [
            "============================================================",
            "üîç –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–ö–ê–ù–ò–†–û–í–ê–ù–ò–Ø",
            "============================================================",
            f"üéØ –¶–µ–ª—å: {target_url}",
            f"‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {format_duration(duration_sec)}",
            f"üöÄ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {perf_per_level:.2f} —Å–µ–∫/—É—Ä–æ–≤–µ–Ω—å",
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏: –≥–ª—É–±–∏–Ω–∞={depth}, –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ={concurrent}, —Ç–∞–π–º–∞—É—Ç={timeout}—Å",
            "============================================================\n",
            "üìä –û–ë–©–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê",
            "----------------------------------------",
            f"–í—Å–µ–≥–æ –ø—Ä–æ–≤–µ—Ä–æ–∫: {total_checks}",
            f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É—è–∑–≤–∏–º–æ—Å—Ç–µ–π: {total_vulns}",
            f"–£—Ä–æ–≤–µ–Ω—å –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {security_level}",
            "\nüí° –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò",
            "----------------------------------------",
            recommendations_title,
            *recommendations
        ]

        if total_vulns > 0:
            report_lines.append("\n" + "="*60)
            report_lines.append("–î–ï–¢–ê–õ–ò –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–• –£–Ø–ó–í–ò–ú–û–°–¢–ï–ô")
            report_lines.append("="*60)

            if sql_vulns:
                report_lines.append("\n---[ SQL Injection ]---")
                for v in sql_vulns:
                    report_lines.append(f"  URL: {v['url']}")
                    report_lines.append(f"  –î–µ—Ç–∞–ª–∏: {v['details']}")
            
            if xss_vulns:
                report_lines.append("\n---[ XSS (Cross-Site Scripting) ]---")
                for v in xss_vulns:
                    report_lines.append(f"  URL: {v['url']}")
                    report_lines.append(f"  –î–µ—Ç–∞–ª–∏: {v['details']}")

            if csrf_vulns:
                report_lines.append("\n---[ CSRF (Cross-Site Request Forgery) ]---")
                for v in csrf_vulns:
                    report_lines.append(f"  URL: {v['url']}")
                    report_lines.append(f"  –î–µ—Ç–∞–ª–∏: {v['details']}")
        
        report_lines.extend([
            "\n" + "="*60,
            "‚úÖ –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ",
            "="*60
        ])

        return "\n".join(report_lines)

class PDF(FPDF):
    def __init__(self):
        super().__init__()

        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
        self.add_font(family='times', style='', fname='timesnewromanpsmt.ttf.ttf', uni=True)
        self.add_font(family='times', style='B', fname='timesnewromanpsmt.ttf.ttf', uni=True)
        self.add_font(family='times', style='I', fname='timesnewromanpsmt.ttf.ttf', uni=True)

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ UTF-8
        self.set_auto_page_break(auto=True, margin=15)
        self.add_page()
    
    def header(self):
        self.set_font('times', 'B', 16)
        self.cell(0, 10, '–û—Ç—á–µ—Ç –æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏', 0, 1, 'C')
        self.ln(10)

    def footer(self):
        self.set_y(-15)
        self.set_font('times', 'I', 8)
        self.cell(0, 10, f'–°—Ç—Ä–∞–Ω–∏—Ü–∞ {self.page_no()}', 0, 0, 'C')

    def chapter_title(self, title):
        self.set_font('times', 'B', 12)
        self.cell(0, 10, title, 0, 1, 'L')
        self.ln(4)

    def chapter_body(self, body):
        self.set_font('times', '', 12)
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF
        body = self._clean_text_for_pdf(body)
        self.multi_cell(0, 5, body)
        self.ln()

    def _clean_text_for_pdf(self, text: str) -> str:
        """–û—á–∏—â–∞–µ—Ç —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ PDF"""
        try:
            # –£–¥–∞–ª—è–µ–º –∏–ª–∏ –∑–∞–º–µ–Ω—è–µ–º —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã
            text = text.replace('\x00', '')
            text = text.replace('\uFFFD', '')
            text = text.replace('\u2028', '')
            text = text.replace('\u2029', '')
            text = text.replace('\u000b', '')
            text = text.replace('\u000c', '')
            text = text.replace('\u000e', '')
            text = text.replace('\u000f', '')
            return text
        except Exception as e:
            logger.error(f"Error cleaning text for PDF: {e}")
            return text

    def add_section(self, title, content):
        self.chapter_title(title)
        self.chapter_body(content)


def generate_pdf_report(scan_id: int, filename: str):
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç PDF –æ—Ç—á–µ—Ç –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è."""
    try:
        generator = ScanReportGenerator(scan_id)
        report_text = generator.generate_full_report()

        pdf = PDF()

        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —à—Ä–∏—Ñ—Ç–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π UTF-8
        try:
            # –ü—ã—Ç–∞–µ–º—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —à—Ä–∏—Ñ—Ç —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –∫–∏—Ä–∏–ª–ª–∏—Ü—ã
            pdf.add_font('times', '', 'timesnewromanpsmt.ttf', uni=True)
            pdf.add_font('times', 'B', 'timesnewromanpsmt.ttf', uni=True)
            pdf.add_font('times', 'I', 'timesnewromanpsmt.ttf', uni=True)
        except (RuntimeError, FileNotFoundError) as e:
            logger.warning(f"Font 'timesnewromanpsmt.ttf' not found: {e}. Using default font.")
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–µ —à—Ä–∏—Ñ—Ç—ã FPDF
            pdf.set_font('helvetica', '', 12)

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è PDF
        report_text = pdf._clean_text_for_pdf(report_text)

        # –ó–∞–º–µ–Ω—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–∏–¥–∞
        report_text = report_text.replace("=" * 60, "-" * 80)

        # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –≤ PDF
        pdf.multi_cell(0, 5, report_text)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º PDF
        pdf.output(filename, 'F')
        logger.info(f"PDF –æ—Ç—á–µ—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {filename}")

    except (OSError, ValueError, KeyError, AttributeError, ImportError, TypeError, RuntimeError, sqlite3.Error) as e:
        log_and_notify('error', f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ PDF –æ—Ç—á–µ—Ç–∞: {e}")
        raise